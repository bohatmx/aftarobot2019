import 'package:aftarobotlibrary3/data/pickupdto.dart';

/*
####### Generated by JavaToDart Wed Dec 19 22:12:26 SAST 2018
####### rigged up by AM Esq.
*/

class CommuterRequestDTO {
  String associationID;
  String originLandmarkID;
  String destinationLandmarkID;
  String originLandmarkName;
  String destinationLandmarkName;
  String routeID;
  String routeName;
  String cityID;
  String cityName;
  String associationName;
  String freeRideVoucherID;
  String commuterRequestID;
  String stringDateUpdated;
  String userID;
  String fcmToken;
  String pickUpID;
  int date;
  int expiryMinutes;
  int requestStartTime;
  int requestEndTime;
  int dateUpdated;
  double tripDistance;
  double latitude;
  double longitude;
  int hour;
  int minute;
  int numberOfPassengers;
  bool cancelledByCommuter;
  bool cancelledByAssociation;
  bool expired;
  bool pickedUpNoScan;
  String requestStatus;
  String stringDistance;
  String stringTimeToDestination;
  String stringDate;
  PickUpDTO pickUp;
  String path;

  CommuterRequestDTO({
    this.associationID,
    this.originLandmarkID,
    this.destinationLandmarkID,
    this.originLandmarkName,
    this.destinationLandmarkName,
    this.routeID,
    this.routeName,
    this.cityID,
    this.cityName,
    this.associationName,
    this.freeRideVoucherID,
    this.commuterRequestID,
    this.stringDateUpdated,
    this.userID,
    this.fcmToken,
    this.pickUpID,
    this.date,
    this.expiryMinutes,
    this.requestStartTime,
    this.requestEndTime,
    this.dateUpdated,
    this.tripDistance,
    this.latitude,
    this.longitude,
    this.hour,
    this.minute,
    this.numberOfPassengers,
    this.cancelledByCommuter,
    this.cancelledByAssociation,
    this.expired,
    this.pickedUpNoScan,
    this.requestStatus,
    this.stringDistance,
    this.stringTimeToDestination,
    this.stringDate,
    this.pickUp,
  });

  CommuterRequestDTO.fromJson(Map data) {
    this.associationID = data['associationID'];
    this.originLandmarkID = data['originLandmarkID'];
    this.destinationLandmarkID = data['destinationLandmarkID'];
    this.originLandmarkName = data['originLandmarkName'];
    this.destinationLandmarkName = data['destinationLandmarkName'];
    this.routeID = data['routeID'];
    this.routeName = data['routeName'];
    this.cityID = data['cityID'];
    this.cityName = data['cityName'];
    this.associationName = data['associationName'];
    this.freeRideVoucherID = data['freeRideVoucherID'];
    this.commuterRequestID = data['commuterRequestID'];
    this.stringDateUpdated = data['stringDateUpdated'];
    this.userID = data['userID'];
    this.fcmToken = data['fcmToken'];
    this.pickUpID = data['pickUpID'];
    this.date = data['date'];
    this.expiryMinutes = data['expiryMinutes'];
    this.requestStartTime = data['requestStartTime'];
    this.requestEndTime = data['requestEndTime'];
    this.dateUpdated = data['dateUpdated'];
    this.tripDistance = data['tripDistance'];
    this.latitude = data['latitude'];
    this.longitude = data['longitude'];
    this.hour = data['hour'];
    this.minute = data['minute'];
    this.numberOfPassengers = data['numberOfPassengers'];
    this.cancelledByCommuter = data['cancelledByCommuter'];
    this.cancelledByAssociation = data['cancelledByAssociation'];
    this.expired = data['expired'];
    this.pickedUpNoScan = data['pickedUpNoScan'];
    this.requestStatus = data['requestStatus'];
    this.stringDistance = data['stringDistance'];
    this.stringTimeToDestination = data['stringTimeToDestination'];
    this.stringDate = data['stringDate'];
    this.pickUp = data['pickUp'];
    this.path = data['path'];
  }

  Map<String, dynamic> toJson() => <String, dynamic>{
        'associationID': associationID,
        'originLandmarkID': originLandmarkID,
        'destinationLandmarkID': destinationLandmarkID,
        'originLandmarkName': originLandmarkName,
        'destinationLandmarkName': destinationLandmarkName,
        'routeID': routeID,
        'routeName': routeName,
        'cityID': cityID,
        'cityName': cityName,
        'associationName': associationName,
        'freeRideVoucherID': freeRideVoucherID,
        'commuterRequestID': commuterRequestID,
        'stringDateUpdated': stringDateUpdated,
        'userID': userID,
        'fcmToken': fcmToken,
        'pickUpID': pickUpID,
        'date': date,
        'expiryMinutes': expiryMinutes,
        'requestStartTime': requestStartTime,
        'requestEndTime': requestEndTime,
        'dateUpdated': dateUpdated,
        'tripDistance': tripDistance,
        'latitude': latitude,
        'longitude': longitude,
        'hour': hour,
        'minute': minute,
        'numberOfPassengers': numberOfPassengers,
        'cancelledByCommuter': cancelledByCommuter,
        'cancelledByAssociation': cancelledByAssociation,
        'expired': expired,
        'pickedUpNoScan': pickedUpNoScan,
        'requestStatus': requestStatus,
        'stringDistance': stringDistance,
        'stringTimeToDestination': stringTimeToDestination,
        'stringDate': stringDate,
        'pickUp': pickUp,
        'path': path,
      };
}
