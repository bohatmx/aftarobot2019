/*
####### Generated by JavaToTypeScript Thu Dec 20 08:57:05 SAST 2018
####### rigged up by AM Esq.
*/

import { JsonObject, JsonProperty } from "json2typescript";

@JsonObject('AdminDTO')
export class AdminDTO {
	@JsonProperty('adminID', String)
	adminID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('phone', String)
	phone: string;
	@JsonProperty('email', String)
	email: string;
	@JsonProperty('password', String)
	password: string;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('gcmID', String)
	gcmID: string;
	@JsonProperty('uid', String)
	uid: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: AdminDTO object

	instance(data) {
	console.log('## setting up instance of: AdminDTO object')

	this.adminID = data.adminID;
	this.associationID = data.associationID;
	this.countryID = data.countryID;
	this.name = data.name;
	this.phone = data.phone;
	this.email = data.email;
	this.password = data.password;
	this.status = data.status;
	this.gcmID = data.gcmID;
	this.uid = data.uid;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	adminID: this.adminID,
	associationID: this.associationID,
	countryID: this.countryID,
	name: this.name,
	phone: this.phone,
	email: this.email,
	password: this.password,
	status: this.status,
	gcmID: this.gcmID,
	uid: this.uid,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: AdminDTO

@JsonObject('AggregatesRatingsDTO')
export class AggregatesRatingsDTO {
	@JsonProperty()
	driverAggregate: DriverAggregateRatingDTO;
	@JsonProperty()
	// experienceAggregate: ExperienceAggregateRatingDTO;
	// @JsonProperty()
	rankAggregate: RankAggregateRatingDTO;
	@JsonProperty()
	safetyAggregate: SafetyAggregateRatingDTO;
	@JsonProperty()
	vehicleAggregate: VehicleAggregateRatingDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: AggregatesRatingsDTO object

	instance(data) {
	console.log('## setting up instance of: AggregatesRatingsDTO object')

	this.driverAggregate = data.driverAggregate;
	// this.experienceAggregate = data.experienceAggregate;
	this.rankAggregate = data.rankAggregate;
	this.safetyAggregate = data.safetyAggregate;
	this.vehicleAggregate = data.vehicleAggregate;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	driverAggregate: this.driverAggregate,
	// experienceAggregate: this.experienceAggregate,
	rankAggregate: this.rankAggregate,
	safetyAggregate: this.safetyAggregate,
	vehicleAggregate: this.vehicleAggregate,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: AggregatesRatingsDTO

@JsonObject('AnnouncementDTO')
export class AnnouncementDTO {
	static ASSOCIATION = 0;
	static ROUTE = 0;
	static LANDMARK = 0;
	static ADMINS = 0;
	static MARSHALS = 0;
	static OWNERS = 0;
	static DRIVERS = 0;
	static PATROLLERS = 0;
	static COMMUTERS = 0;
	static ROUTE_BUILDERS = 0;
	@JsonProperty('includesCommuters', Boolean)
	includesCommuters: boolean;
	@JsonProperty('announcementID', String)
	announcementID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('title', String)
	title: string;
	@JsonProperty('message', String)
	message: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty()
	user: UserDTO;
	@JsonProperty('priority', Number)
	priority: number;
	@JsonProperty('announcementType', Number)
	announcementType: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('expiryDate', Number)
	expiryDate: number;


//**** Handle this list: photoList

	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: AnnouncementDTO object

	instance(data) {
	console.log('## setting up instance of: AnnouncementDTO object')

	this.includesCommuters = data.includesCommuters;
	this.announcementID = data.announcementID;
	this.associationID = data.associationID;
	this.userID = data.userID;
	this.routeID = data.routeID;
	this.landmarkID = data.landmarkID;
	this.associationName = data.associationName;
	this.routeName = data.routeName;
	this.landmarkName = data.landmarkName;
	this.title = data.title;
	this.message = data.message;
	this.stringDate = data.stringDate;
	this.user = data.user;
	this.priority = data.priority;
	this.announcementType = data.announcementType;
	this.date = data.date;
	this.expiryDate = data.expiryDate;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	includesCommuters: this.includesCommuters,
	announcementID: this.announcementID,
	associationID: this.associationID,
	userID: this.userID,
	routeID: this.routeID,
	landmarkID: this.landmarkID,
	associationName: this.associationName,
	routeName: this.routeName,
	landmarkName: this.landmarkName,
	title: this.title,
	message: this.message,
	stringDate: this.stringDate,
	user: this.user,
	priority: this.priority,
	announcementType: this.announcementType,
	date: this.date,
	expiryDate: this.expiryDate,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: AnnouncementDTO

@JsonObject('ApologyDTO')
export class ApologyDTO {
	@JsonProperty('apologyID', String)
	apologyID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('uid', String)
	uid: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('stackTrace', String)
	stackTrace: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('userMessage', String)
	userMessage: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('problemResolvedSent', Boolean)
	problemResolvedSent: boolean;
	@JsonProperty('version', Number)
	version: number;
	@JsonProperty('versionCode', Number)
	versionCode: number;
	@JsonProperty()
	device: DeviceDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: ApologyDTO object

	instance(data) {
	console.log('## setting up instance of: ApologyDTO object')

	this.apologyID = data.apologyID;
	this.userID = data.userID;
	this.uid = data.uid;
	this.fcmToken = data.fcmToken;
	this.stackTrace = data.stackTrace;
	this.stringDate = data.stringDate;
	this.userMessage = data.userMessage;
	this.date = data.date;
	this.problemResolvedSent = data.problemResolvedSent;
	this.version = data.version;
	this.versionCode = data.versionCode;
	this.device = data.device;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	apologyID: this.apologyID,
	userID: this.userID,
	uid: this.uid,
	fcmToken: this.fcmToken,
	stackTrace: this.stackTrace,
	stringDate: this.stringDate,
	userMessage: this.userMessage,
	date: this.date,
	problemResolvedSent: this.problemResolvedSent,
	version: this.version,
	versionCode: this.versionCode,
	device: this.device,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: ApologyDTO

@JsonObject('AssociationDTO')
export class AssociationDTO {
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('phone', String)
	phone: string;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('countryName', String)
	countryName: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: AssociationDTO object

	instance(data) {
	console.log('## setting up instance of: AssociationDTO object')

	this.associationID = data.associationID;
	this.cityID = data.cityID;
	this.countryID = data.countryID;
	this.associationName = data.associationName;
	this.phone = data.phone;
	this.status = data.status;
	this.countryName = data.countryName;
	this.cityName = data.cityName;
	this.stringDate = data.stringDate;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	associationID: this.associationID,
	cityID: this.cityID,
	countryID: this.countryID,
	associationName: this.associationName,
	phone: this.phone,
	status: this.status,
	countryName: this.countryName,
	cityName: this.cityName,
	stringDate: this.stringDate,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: AssociationDTO

@JsonObject('AttachmentDTO')
export class AttachmentDTO {
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('beaconName', String)
	beaconName: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('dateRegistered', Number)
	dateRegistered: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: AttachmentDTO object

	instance(data) {
	console.log('## setting up instance of: AttachmentDTO object')

	this.cityID = data.cityID;
	this.routeID = data.routeID;
	this.beaconName = data.beaconName;
	this.landmarkID = data.landmarkID;
	this.landmarkName = data.landmarkName;
	this.routeName = data.routeName;
	this.cityName = data.cityName;
	this.dateRegistered = data.dateRegistered;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	cityID: this.cityID,
	routeID: this.routeID,
	beaconName: this.beaconName,
	landmarkID: this.landmarkID,
	landmarkName: this.landmarkName,
	routeName: this.routeName,
	cityName: this.cityName,
	dateRegistered: this.dateRegistered,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: AttachmentDTO

@JsonObject('AttachmentForVehicleDTO')
export class AttachmentForVehicleDTO {
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('vehicleReg', String)
	vehicleReg: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('ownerID', String)
	ownerID: string;
	@JsonProperty('beaconName', String)
	beaconName: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('make', String)
	make: string;
	@JsonProperty('model', String)
	model: string;
	@JsonProperty('capacity', Number)
	capacity: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: AttachmentForVehicleDTO object

	instance(data) {
	console.log('## setting up instance of: AttachmentForVehicleDTO object')

	this.vehicleID = data.vehicleID;
	this.vehicleReg = data.vehicleReg;
	this.associationID = data.associationID;
	this.ownerID = data.ownerID;
	this.beaconName = data.beaconName;
	this.associationName = data.associationName;
	this.make = data.make;
	this.model = data.model;
	this.capacity = data.capacity;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	vehicleID: this.vehicleID,
	vehicleReg: this.vehicleReg,
	associationID: this.associationID,
	ownerID: this.ownerID,
	beaconName: this.beaconName,
	associationName: this.associationName,
	make: this.make,
	model: this.model,
	capacity: this.capacity,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: AttachmentForVehicleDTO

@JsonObject('BasicMessageDTO')
export class BasicMessageDTO {
	@JsonProperty('title', String)
	title: string;
	@JsonProperty('body', String)
	body: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('json', String)
	json: string;
	@JsonProperty('from', String)
	from: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: BasicMessageDTO object

	instance(data) {
	console.log('## setting up instance of: BasicMessageDTO object')

	this.title = data.title;
	this.body = data.body;
	this.stringDate = data.stringDate;
	this.json = data.json;
	this.from = data.from;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	title: this.title,
	body: this.body,
	stringDate: this.stringDate,
	json: this.json,
	from: this.from,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: BasicMessageDTO

@JsonObject('BeaconLogDTO')
export class BeaconLogDTO {
	@JsonProperty('beaconName', String)
	beaconName: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('updatedBy', String)
	updatedBy: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('vehicleReg', String)
	vehicleReg: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('removedFromVehicle', Boolean)
	removedFromVehicle: boolean;
	@JsonProperty('addedToVehicle', Boolean)
	addedToVehicle: boolean;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: BeaconLogDTO object

	instance(data) {
	console.log('## setting up instance of: BeaconLogDTO object')

	this.beaconName = data.beaconName;
	this.vehicleID = data.vehicleID;
	this.updatedBy = data.updatedBy;
	this.stringDate = data.stringDate;
	this.vehicleReg = data.vehicleReg;
	this.associationID = data.associationID;
	this.associationName = data.associationName;
	this.date = data.date;
	this.removedFromVehicle = data.removedFromVehicle;
	this.addedToVehicle = data.addedToVehicle;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	beaconName: this.beaconName,
	vehicleID: this.vehicleID,
	updatedBy: this.updatedBy,
	stringDate: this.stringDate,
	vehicleReg: this.vehicleReg,
	associationID: this.associationID,
	associationName: this.associationName,
	date: this.date,
	removedFromVehicle: this.removedFromVehicle,
	addedToVehicle: this.addedToVehicle,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: BeaconLogDTO

@JsonObject('CityDTO')
export class CityDTO {
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('provinceID', String)
	provinceID: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('provinceName', String)
	provinceName: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('countryName', String)
	countryName: string;
	@JsonProperty()
	builder: UserDTO;
	@JsonProperty('date', Number)
	date: number;


//**** Handle this list: routeList



//**** Handle this list: associationList

	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CityDTO object

	instance(data) {
	console.log('## setting up instance of: CityDTO object')

	this.cityID = data.cityID;
	this.provinceID = data.provinceID;
	this.countryID = data.countryID;
	this.name = data.name;
	this.status = data.status;
	this.provinceName = data.provinceName;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.countryName = data.countryName;
	this.builder = data.builder;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	cityID: this.cityID,
	provinceID: this.provinceID,
	countryID: this.countryID,
	name: this.name,
	status: this.status,
	provinceName: this.provinceName,
	latitude: this.latitude,
	longitude: this.longitude,
	countryName: this.countryName,
	builder: this.builder,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CityDTO

@JsonObject('CommuterArrivalDTO')
export class CommuterArrivalDTO {
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('arrivalID', String)
	arrivalID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('dateArrived', Number)
	dateArrived: number;
	@JsonProperty()
	user: UserDTO;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty()
	device: DeviceDTO;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CommuterArrivalDTO object

	instance(data) {
	console.log('## setting up instance of: CommuterArrivalDTO object')

	this.stringDate = data.stringDate;
	this.arrivalID = data.arrivalID;
	this.landmarkID = data.landmarkID;
	this.landmarkName = data.landmarkName;
	this.userID = data.userID;
	this.cityID = data.cityID;
	this.cityName = data.cityName;
	this.routeID = data.routeID;
	this.vehicleID = data.vehicleID;
	this.countryID = data.countryID;
	this.dateArrived = data.dateArrived;
	this.user = data.user;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.device = data.device;
	this.routeName = data.routeName;
	this.associationName = data.associationName;
	this.associationID = data.associationID;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	stringDate: this.stringDate,
	arrivalID: this.arrivalID,
	landmarkID: this.landmarkID,
	landmarkName: this.landmarkName,
	userID: this.userID,
	cityID: this.cityID,
	cityName: this.cityName,
	routeID: this.routeID,
	vehicleID: this.vehicleID,
	countryID: this.countryID,
	dateArrived: this.dateArrived,
	user: this.user,
	latitude: this.latitude,
	longitude: this.longitude,
	device: this.device,
	routeName: this.routeName,
	associationName: this.associationName,
	associationID: this.associationID,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CommuterArrivalDTO

@JsonObject('CommuterDTO')
export class CommuterDTO {
	@JsonProperty('commuterID', Number)
	commuterID: number;
	@JsonProperty('gcmID', String)
	gcmID: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('surname', String)
	surname: string;
	@JsonProperty('phone', String)
	phone: string;
	@JsonProperty('email', String)
	email: string;
	@JsonProperty('password', String)
	password: string;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('date', Number)
	date: number;


//**** Handle this list: photos

	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CommuterDTO object

	instance(data) {
	console.log('## setting up instance of: CommuterDTO object')

	this.commuterID = data.commuterID;
	this.gcmID = data.gcmID;
	this.name = data.name;
	this.surname = data.surname;
	this.phone = data.phone;
	this.email = data.email;
	this.password = data.password;
	this.status = data.status;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	commuterID: this.commuterID,
	gcmID: this.gcmID,
	name: this.name,
	surname: this.surname,
	phone: this.phone,
	email: this.email,
	password: this.password,
	status: this.status,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CommuterDTO

@JsonObject('CommuterDepartureDTO')
export class CommuterDepartureDTO {
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('departureID', String)
	departureID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('dateDeparted', Number)
	dateDeparted: number;
	@JsonProperty()
	device: DeviceDTO;
	@JsonProperty()
	user: UserDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CommuterDepartureDTO object

	instance(data) {
	console.log('## setting up instance of: CommuterDepartureDTO object')

	this.stringDate = data.stringDate;
	this.departureID = data.departureID;
	this.landmarkID = data.landmarkID;
	this.landmarkName = data.landmarkName;
	this.userID = data.userID;
	this.cityID = data.cityID;
	this.cityName = data.cityName;
	this.routeID = data.routeID;
	this.vehicleID = data.vehicleID;
	this.countryID = data.countryID;
	this.dateDeparted = data.dateDeparted;
	this.device = data.device;
	this.user = data.user;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	stringDate: this.stringDate,
	departureID: this.departureID,
	landmarkID: this.landmarkID,
	landmarkName: this.landmarkName,
	userID: this.userID,
	cityID: this.cityID,
	cityName: this.cityName,
	routeID: this.routeID,
	vehicleID: this.vehicleID,
	countryID: this.countryID,
	dateDeparted: this.dateDeparted,
	device: this.device,
	user: this.user,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CommuterDepartureDTO

@JsonObject('CommuterFinishedDrivingDTO')
export class CommuterFinishedDrivingDTO {
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('vehicleReg', String)
	vehicleReg: string;
	@JsonProperty('make', String)
	make: string;
	@JsonProperty('model', String)
	model: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CommuterFinishedDrivingDTO object

	instance(data) {
	console.log('## setting up instance of: CommuterFinishedDrivingDTO object')

	this.userID = data.userID;
	this.vehicleID = data.vehicleID;
	this.vehicleReg = data.vehicleReg;
	this.make = data.make;
	this.model = data.model;
	this.stringDate = data.stringDate;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userID: this.userID,
	vehicleID: this.vehicleID,
	vehicleReg: this.vehicleReg,
	make: this.make,
	model: this.model,
	stringDate: this.stringDate,
	latitude: this.latitude,
	longitude: this.longitude,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CommuterFinishedDrivingDTO

@JsonObject('CommuterFinishedWalkingDTO')
export class CommuterFinishedWalkingDTO {
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('finishedWalkingID', String)
	finishedWalkingID: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CommuterFinishedWalkingDTO object

	instance(data) {
	console.log('## setting up instance of: CommuterFinishedWalkingDTO object')

	this.userID = data.userID;
	this.stringDate = data.stringDate;
	this.finishedWalkingID = data.finishedWalkingID;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userID: this.userID,
	stringDate: this.stringDate,
	finishedWalkingID: this.finishedWalkingID,
	latitude: this.latitude,
	longitude: this.longitude,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CommuterFinishedWalkingDTO

@JsonObject('CommuterLogDTO')
export class CommuterLogDTO {
	@JsonProperty('commuterLogID', String)
	commuterLogID: string;
	@JsonProperty('panicID', String)
	panicID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty()
	user: UserDTO;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('accuracy', Number)
	accuracy: number;
	@JsonProperty('bearing', Number)
	bearing: number;
	@JsonProperty()
	device: DeviceDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CommuterLogDTO object

	instance(data) {
	console.log('## setting up instance of: CommuterLogDTO object')

	this.commuterLogID = data.commuterLogID;
	this.panicID = data.panicID;
	this.userID = data.userID;
	this.vehicleID = data.vehicleID;
	this.stringDate = data.stringDate;
	this.vehicle = data.vehicle;
	this.user = data.user;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.date = data.date;
	this.accuracy = data.accuracy;
	this.bearing = data.bearing;
	this.device = data.device;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	commuterLogID: this.commuterLogID,
	panicID: this.panicID,
	userID: this.userID,
	vehicleID: this.vehicleID,
	stringDate: this.stringDate,
	vehicle: this.vehicle,
	user: this.user,
	latitude: this.latitude,
	longitude: this.longitude,
	date: this.date,
	accuracy: this.accuracy,
	bearing: this.bearing,
	device: this.device,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CommuterLogDTO

@JsonObject('CommuterRequestDTO')
export class CommuterRequestDTO {
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('originLandmarkID', String)
	originLandmarkID: string;
	@JsonProperty('destinationLandmarkID', String)
	destinationLandmarkID: string;
	@JsonProperty('originLandmarkName', String)
	originLandmarkName: string;
	@JsonProperty('destinationLandmarkName', String)
	destinationLandmarkName: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('freeRideVoucherID', String)
	freeRideVoucherID: string;
	@JsonProperty('commuterRequestID', String)
	commuterRequestID: string;
	@JsonProperty('stringDateUpdated', String)
	stringDateUpdated: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('pickUpID', String)
	pickUpID: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('expiryMinutes', Number)
	expiryMinutes: number;
	@JsonProperty('requestStartTime', Number)
	requestStartTime: number;
	@JsonProperty('requestEndTime', Number)
	requestEndTime: number;
	@JsonProperty('dateUpdated', Number)
	dateUpdated: number;
	@JsonProperty('tripDistance', Number)
	tripDistance: number;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('hour', Number)
	hour: number;
	@JsonProperty('minute', Number)
	minute: number;
	@JsonProperty('numberOfPassengers', Number)
	numberOfPassengers: number;
	@JsonProperty('cancelledByCommuter', Boolean)
	cancelledByCommuter: boolean;
	@JsonProperty('cancelledByAssociation', Boolean)
	cancelledByAssociation: boolean;
	@JsonProperty('expired', Boolean)
	expired: boolean;
	@JsonProperty('pickedUpNoScan', Boolean)
	pickedUpNoScan: boolean;
	@JsonProperty('requestStatus', String)
	requestStatus: string;
	@JsonProperty('stringDistance', String)
	stringDistance: string;
	@JsonProperty('stringTimeToDestination', String)
	stringTimeToDestination: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty()
	pickUp: PickUpDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CommuterRequestDTO object

	instance(data) {
	console.log('## setting up instance of: CommuterRequestDTO object')

	this.associationID = data.associationID;
	this.originLandmarkID = data.originLandmarkID;
	this.destinationLandmarkID = data.destinationLandmarkID;
	this.originLandmarkName = data.originLandmarkName;
	this.destinationLandmarkName = data.destinationLandmarkName;
	this.routeID = data.routeID;
	this.routeName = data.routeName;
	this.cityID = data.cityID;
	this.cityName = data.cityName;
	this.associationName = data.associationName;
	this.freeRideVoucherID = data.freeRideVoucherID;
	this.commuterRequestID = data.commuterRequestID;
	this.stringDateUpdated = data.stringDateUpdated;
	this.userID = data.userID;
	this.fcmToken = data.fcmToken;
	this.pickUpID = data.pickUpID;
	this.date = data.date;
	this.expiryMinutes = data.expiryMinutes;
	this.requestStartTime = data.requestStartTime;
	this.requestEndTime = data.requestEndTime;
	this.dateUpdated = data.dateUpdated;
	this.tripDistance = data.tripDistance;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.hour = data.hour;
	this.minute = data.minute;
	this.numberOfPassengers = data.numberOfPassengers;
	this.cancelledByCommuter = data.cancelledByCommuter;
	this.cancelledByAssociation = data.cancelledByAssociation;
	this.expired = data.expired;
	this.pickedUpNoScan = data.pickedUpNoScan;
	this.requestStatus = data.requestStatus;
	this.stringDistance = data.stringDistance;
	this.stringTimeToDestination = data.stringTimeToDestination;
	this.stringDate = data.stringDate;
	this.pickUp = data.pickUp;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	associationID: this.associationID,
	originLandmarkID: this.originLandmarkID,
	destinationLandmarkID: this.destinationLandmarkID,
	originLandmarkName: this.originLandmarkName,
	destinationLandmarkName: this.destinationLandmarkName,
	routeID: this.routeID,
	routeName: this.routeName,
	cityID: this.cityID,
	cityName: this.cityName,
	associationName: this.associationName,
	freeRideVoucherID: this.freeRideVoucherID,
	commuterRequestID: this.commuterRequestID,
	stringDateUpdated: this.stringDateUpdated,
	userID: this.userID,
	fcmToken: this.fcmToken,
	pickUpID: this.pickUpID,
	date: this.date,
	expiryMinutes: this.expiryMinutes,
	requestStartTime: this.requestStartTime,
	requestEndTime: this.requestEndTime,
	dateUpdated: this.dateUpdated,
	tripDistance: this.tripDistance,
	latitude: this.latitude,
	longitude: this.longitude,
	hour: this.hour,
	minute: this.minute,
	numberOfPassengers: this.numberOfPassengers,
	cancelledByCommuter: this.cancelledByCommuter,
	cancelledByAssociation: this.cancelledByAssociation,
	expired: this.expired,
	pickedUpNoScan: this.pickedUpNoScan,
	requestStatus: this.requestStatus,
	stringDistance: this.stringDistance,
	stringTimeToDestination: this.stringTimeToDestination,
	stringDate: this.stringDate,
	pickUp: this.pickUp,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CommuterRequestDTO

@JsonObject('CommuterStartDrivingDTO')
export class CommuterStartDrivingDTO {
	@JsonProperty('commuterDrivingID', String)
	commuterDrivingID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('beaconName', String)
	beaconName: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('vehicleReg', String)
	vehicleReg: string;
	@JsonProperty('make', String)
	make: string;
	@JsonProperty('model', String)
	model: string;
	@JsonProperty('starting', Boolean)
	starting: boolean;
	@JsonProperty('stopping', Boolean)
	stopping: boolean;
	@JsonProperty('moving', Boolean)
	moving: boolean;
	@JsonProperty('beaconFound', Boolean)
	beaconFound: boolean;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('capacity', Number)
	capacity: number;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('bearing', Number)
	bearing: number;
	@JsonProperty('speed', Number)
	speed: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CommuterStartDrivingDTO object

	instance(data) {
	console.log('## setting up instance of: CommuterStartDrivingDTO object')

	this.commuterDrivingID = data.commuterDrivingID;
	this.userID = data.userID;
	this.stringDate = data.stringDate;
	this.name = data.name;
	this.fcmToken = data.fcmToken;
	this.beaconName = data.beaconName;
	this.vehicleID = data.vehicleID;
	this.vehicleReg = data.vehicleReg;
	this.make = data.make;
	this.model = data.model;
	this.starting = data.starting;
	this.stopping = data.stopping;
	this.moving = data.moving;
	this.beaconFound = data.beaconFound;
	this.date = data.date;
	this.capacity = data.capacity;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.bearing = data.bearing;
	this.speed = data.speed;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	commuterDrivingID: this.commuterDrivingID,
	userID: this.userID,
	stringDate: this.stringDate,
	name: this.name,
	fcmToken: this.fcmToken,
	beaconName: this.beaconName,
	vehicleID: this.vehicleID,
	vehicleReg: this.vehicleReg,
	make: this.make,
	model: this.model,
	starting: this.starting,
	stopping: this.stopping,
	moving: this.moving,
	beaconFound: this.beaconFound,
	date: this.date,
	capacity: this.capacity,
	latitude: this.latitude,
	longitude: this.longitude,
	bearing: this.bearing,
	speed: this.speed,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CommuterStartDrivingDTO

@JsonObject('CommuterStartWalkingDTO')
export class CommuterStartWalkingDTO {
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('startWalkingID', String)
	startWalkingID: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CommuterStartWalkingDTO object

	instance(data) {
	console.log('## setting up instance of: CommuterStartWalkingDTO object')

	this.userID = data.userID;
	this.stringDate = data.stringDate;
	this.startWalkingID = data.startWalkingID;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userID: this.userID,
	stringDate: this.stringDate,
	startWalkingID: this.startWalkingID,
	latitude: this.latitude,
	longitude: this.longitude,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CommuterStartWalkingDTO

@JsonObject('CommuterTripLogDTO')
export class CommuterTripLogDTO {
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('commuterTripLogID', String)
	commuterTripLogID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty()
	commuter: UserDTO;
	@JsonProperty('accuracy', Number)
	accuracy: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CommuterTripLogDTO object

	instance(data) {
	console.log('## setting up instance of: CommuterTripLogDTO object')

	this.vehicle = data.vehicle;
	this.date = data.date;
	this.commuterTripLogID = data.commuterTripLogID;
	this.userID = data.userID;
	this.vehicleID = data.vehicleID;
	this.routeID = data.routeID;
	this.routeName = data.routeName;
	this.stringDate = data.stringDate;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.commuter = data.commuter;
	this.accuracy = data.accuracy;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	vehicle: this.vehicle,
	date: this.date,
	commuterTripLogID: this.commuterTripLogID,
	userID: this.userID,
	vehicleID: this.vehicleID,
	routeID: this.routeID,
	routeName: this.routeName,
	stringDate: this.stringDate,
	latitude: this.latitude,
	longitude: this.longitude,
	commuter: this.commuter,
	accuracy: this.accuracy,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CommuterTripLogDTO

@JsonObject('CommuterVehicleDTO')
export class CommuterVehicleDTO {
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('ownerID', String)
	ownerID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('commuterVehicleID', String)
	commuterVehicleID: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('beaconID', String)
	beaconID: string;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty()
	user: UserDTO;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('starting', Boolean)
	starting: boolean;
	@JsonProperty('stopping', Boolean)
	stopping: boolean;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CommuterVehicleDTO object

	instance(data) {
	console.log('## setting up instance of: CommuterVehicleDTO object')

	this.vehicleID = data.vehicleID;
	this.ownerID = data.ownerID;
	this.userID = data.userID;
	this.commuterVehicleID = data.commuterVehicleID;
	this.stringDate = data.stringDate;
	this.beaconID = data.beaconID;
	this.vehicle = data.vehicle;
	this.user = data.user;
	this.date = data.date;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.starting = data.starting;
	this.stopping = data.stopping;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	vehicleID: this.vehicleID,
	ownerID: this.ownerID,
	userID: this.userID,
	commuterVehicleID: this.commuterVehicleID,
	stringDate: this.stringDate,
	beaconID: this.beaconID,
	vehicle: this.vehicle,
	user: this.user,
	date: this.date,
	latitude: this.latitude,
	longitude: this.longitude,
	starting: this.starting,
	stopping: this.stopping,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CommuterVehicleDTO

@JsonObject('ConfigDTO')
export class ConfigDTO {
	@JsonProperty('configID', String)
	configID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('driverLogStartHour', Number)
	driverLogStartHour: number;
	@JsonProperty('driverLogEndHour', Number)
	driverLogEndHour: number;
	@JsonProperty('driverLogFrequencyMinutes', Number)
	driverLogFrequencyMinutes: number;
	@JsonProperty('fenceDwellSeconds', Number)
	fenceDwellSeconds: number;
	@JsonProperty('pointsPerCommuterRequest', Number)
	pointsPerCommuterRequest: number;
	@JsonProperty('totalPointsForVoucher', Number)
	totalPointsForVoucher: number;
	@JsonProperty('numberOfDaysForValidVoucher', Number)
	numberOfDaysForValidVoucher: number;
	@JsonProperty('commuterRequestExpirationMinutes', Number)
	commuterRequestExpirationMinutes: number;
	@JsonProperty('safetyLogIntervalSeconds', Number)
	safetyLogIntervalSeconds: number;
	@JsonProperty('safetyLogPeriodHours', Number)
	safetyLogPeriodHours: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('adsOn', Boolean)
	adsOn: boolean;
	@JsonProperty('neuraOn', Boolean)
	neuraOn: boolean;
	@JsonProperty('hyperTrackOn', Boolean)
	hyperTrackOn: boolean;
	@JsonProperty('wifiTrackOnly', Boolean)
	wifiTrackOnly: boolean;
	@JsonProperty('region', String)
	region: string;
	@JsonProperty('language', String)
	language: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: ConfigDTO object

	instance(data) {
	console.log('## setting up instance of: ConfigDTO object')

	this.configID = data.configID;
	this.associationID = data.associationID;
	this.associationName = data.associationName;
	this.stringDate = data.stringDate;
	this.driverLogStartHour = data.driverLogStartHour;
	this.driverLogEndHour = data.driverLogEndHour;
	this.driverLogFrequencyMinutes = data.driverLogFrequencyMinutes;
	this.fenceDwellSeconds = data.fenceDwellSeconds;
	this.pointsPerCommuterRequest = data.pointsPerCommuterRequest;
	this.totalPointsForVoucher = data.totalPointsForVoucher;
	this.numberOfDaysForValidVoucher = data.numberOfDaysForValidVoucher;
	this.commuterRequestExpirationMinutes = data.commuterRequestExpirationMinutes;
	this.safetyLogIntervalSeconds = data.safetyLogIntervalSeconds;
	this.safetyLogPeriodHours = data.safetyLogPeriodHours;
	this.date = data.date;
	this.adsOn = data.adsOn;
	this.neuraOn = data.neuraOn;
	this.hyperTrackOn = data.hyperTrackOn;
	this.wifiTrackOnly = data.wifiTrackOnly;
	this.region = data.region;
	this.language = data.language;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	configID: this.configID,
	associationID: this.associationID,
	associationName: this.associationName,
	stringDate: this.stringDate,
	driverLogStartHour: this.driverLogStartHour,
	driverLogEndHour: this.driverLogEndHour,
	driverLogFrequencyMinutes: this.driverLogFrequencyMinutes,
	fenceDwellSeconds: this.fenceDwellSeconds,
	pointsPerCommuterRequest: this.pointsPerCommuterRequest,
	totalPointsForVoucher: this.totalPointsForVoucher,
	numberOfDaysForValidVoucher: this.numberOfDaysForValidVoucher,
	commuterRequestExpirationMinutes: this.commuterRequestExpirationMinutes,
	safetyLogIntervalSeconds: this.safetyLogIntervalSeconds,
	safetyLogPeriodHours: this.safetyLogPeriodHours,
	date: this.date,
	adsOn: this.adsOn,
	neuraOn: this.neuraOn,
	hyperTrackOn: this.hyperTrackOn,
	wifiTrackOnly: this.wifiTrackOnly,
	region: this.region,
	language: this.language,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: ConfigDTO

@JsonObject('CountryDTO')
export class CountryDTO {
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('date', Number)
	date: number;


//**** Handle this list: provinceList



//**** Handle this list: vehicleTypeList

	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: CountryDTO object

	instance(data) {
	console.log('## setting up instance of: CountryDTO object')

	this.countryID = data.countryID;
	this.name = data.name;
	this.status = data.status;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	countryID: this.countryID,
	name: this.name,
	status: this.status,
	latitude: this.latitude,
	longitude: this.longitude,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: CountryDTO

@JsonObject('DeviceDTO')
export class DeviceDTO {
	@JsonProperty('model', String)
	model: string;
	@JsonProperty('manufacturer', String)
	manufacturer: string;
	@JsonProperty('androidVersion', String)
	androidVersion: string;
	@JsonProperty('serialNumber', String)
	serialNumber: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('email', String)
	email: string;
	@JsonProperty('userType', Number)
	userType: number;
	@JsonProperty('token', String)
	token: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: DeviceDTO object

	instance(data) {
	console.log('## setting up instance of: DeviceDTO object')

	this.model = data.model;
	this.manufacturer = data.manufacturer;
	this.androidVersion = data.androidVersion;
	this.serialNumber = data.serialNumber;
	this.associationID = data.associationID;
	this.userID = data.userID;
	this.email = data.email;
	this.userType = data.userType;
	this.token = data.token;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	model: this.model,
	manufacturer: this.manufacturer,
	androidVersion: this.androidVersion,
	serialNumber: this.serialNumber,
	associationID: this.associationID,
	userID: this.userID,
	email: this.email,
	userType: this.userType,
	token: this.token,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: DeviceDTO

@JsonObject('DriverAggregateRatingDTO')
export class DriverAggregateRatingDTO {
	@JsonProperty('aggregate', Number)
	aggregate: number;
	@JsonProperty('count', Number)
	count: number;
	@JsonProperty('total', Number)
	total: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: DriverAggregateRatingDTO object

	instance(data) {
	console.log('## setting up instance of: DriverAggregateRatingDTO object')

	this.aggregate = data.aggregate;
	this.count = data.count;
	this.total = data.total;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	aggregate: this.aggregate,
	count: this.count,
	total: this.total,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: DriverAggregateRatingDTO

@JsonObject('DriverFinishedWalkingDTO')
export class DriverFinishedWalkingDTO {
	@JsonProperty('driverWalkingID', String)
	driverWalkingID: string;
	@JsonProperty('driverID', String)
	driverID: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: DriverFinishedWalkingDTO object

	instance(data) {
	console.log('## setting up instance of: DriverFinishedWalkingDTO object')

	this.driverWalkingID = data.driverWalkingID;
	this.driverID = data.driverID;
	this.name = data.name;
	this.associationID = data.associationID;
	this.associationName = data.associationName;
	this.stringDate = data.stringDate;
	this.date = data.date;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	driverWalkingID: this.driverWalkingID,
	driverID: this.driverID,
	name: this.name,
	associationID: this.associationID,
	associationName: this.associationName,
	stringDate: this.stringDate,
	date: this.date,
	latitude: this.latitude,
	longitude: this.longitude,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: DriverFinishedWalkingDTO

@JsonObject('DriverLogDTO')
export class DriverLogDTO {
	@JsonProperty('driverLogID', String)
	driverLogID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('nearestAddress', String)
	nearestAddress: string;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty()
	landmark: LandmarkDTO;
	@JsonProperty()
	user: UserDTO;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('accuracy', Number)
	accuracy: number;
	@JsonProperty('bearing', Number)
	bearing: number;
	@JsonProperty('speed', Number)
	speed: number;
	@JsonProperty('locationRequested', Boolean)
	locationRequested: boolean;
	@JsonProperty()
	device: DeviceDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: DriverLogDTO object

	instance(data) {
	console.log('## setting up instance of: DriverLogDTO object')

	this.driverLogID = data.driverLogID;
	this.userID = data.userID;
	this.vehicleID = data.vehicleID;
	this.stringDate = data.stringDate;
	this.nearestAddress = data.nearestAddress;
	this.vehicle = data.vehicle;
	this.landmark = data.landmark;
	this.user = data.user;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.date = data.date;
	this.accuracy = data.accuracy;
	this.bearing = data.bearing;
	this.speed = data.speed;
	this.locationRequested = data.locationRequested;
	this.device = data.device;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	driverLogID: this.driverLogID,
	userID: this.userID,
	vehicleID: this.vehicleID,
	stringDate: this.stringDate,
	nearestAddress: this.nearestAddress,
	vehicle: this.vehicle,
	landmark: this.landmark,
	user: this.user,
	latitude: this.latitude,
	longitude: this.longitude,
	date: this.date,
	accuracy: this.accuracy,
	bearing: this.bearing,
	speed: this.speed,
	locationRequested: this.locationRequested,
	device: this.device,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: DriverLogDTO

@JsonObject('DriverMarshalCampaignDTO')
export class DriverMarshalCampaignDTO {
	@JsonProperty('driverMarshalCampaignID', String)
	driverMarshalCampaignID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('startDate', Number)
	startDate: number;
	@JsonProperty('endDate', Number)
	endDate: number;
	@JsonProperty('dateRegistered', Number)
	dateRegistered: number;
	@JsonProperty('stringStartDate', String)
	stringStartDate: string;
	@JsonProperty('stringEndDate', String)
	stringEndDate: string;
	@JsonProperty('description', String)
	description: string;
	@JsonProperty('stringDateRegistered', String)
	stringDateRegistered: string;
	@JsonProperty('minimumTrips', Number)
	minimumTrips: number;
	@JsonProperty('minimumPickups', Number)
	minimumPickups: number;
	@JsonProperty('minimumCommuters', Number)
	minimumCommuters: number;
	@JsonProperty('pointValue', Number)
	pointValue: number;
	@JsonProperty('budget', Number)
	budget: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: DriverMarshalCampaignDTO object

	instance(data) {
	console.log('## setting up instance of: DriverMarshalCampaignDTO object')

	this.driverMarshalCampaignID = data.driverMarshalCampaignID;
	this.associationID = data.associationID;
	this.associationName = data.associationName;
	this.startDate = data.startDate;
	this.endDate = data.endDate;
	this.dateRegistered = data.dateRegistered;
	this.stringStartDate = data.stringStartDate;
	this.stringEndDate = data.stringEndDate;
	this.description = data.description;
	this.stringDateRegistered = data.stringDateRegistered;
	this.minimumTrips = data.minimumTrips;
	this.minimumPickups = data.minimumPickups;
	this.minimumCommuters = data.minimumCommuters;
	this.pointValue = data.pointValue;
	this.budget = data.budget;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	driverMarshalCampaignID: this.driverMarshalCampaignID,
	associationID: this.associationID,
	associationName: this.associationName,
	startDate: this.startDate,
	endDate: this.endDate,
	dateRegistered: this.dateRegistered,
	stringStartDate: this.stringStartDate,
	stringEndDate: this.stringEndDate,
	description: this.description,
	stringDateRegistered: this.stringDateRegistered,
	minimumTrips: this.minimumTrips,
	minimumPickups: this.minimumPickups,
	minimumCommuters: this.minimumCommuters,
	pointValue: this.pointValue,
	budget: this.budget,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: DriverMarshalCampaignDTO

@JsonObject('DriverMarshalCampaignSummaryDTO')
export class DriverMarshalCampaignSummaryDTO {
	@JsonProperty('driverMarshalCampaignSummaryID', String)
	driverMarshalCampaignSummaryID: string;
	@JsonProperty('driverMarshalCampaignID', String)
	driverMarshalCampaignID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('email', String)
	email: string;
	@JsonProperty('dateOfCalculation', Number)
	dateOfCalculation: number;
	@JsonProperty('dateStart', Number)
	dateStart: number;
	@JsonProperty('dateEnd', Number)
	dateEnd: number;
	@JsonProperty('datePaid', Number)
	datePaid: number;
	@JsonProperty('stringDateOfCalculation', String)
	stringDateOfCalculation: string;
	@JsonProperty('stringDateStart', String)
	stringDateStart: string;
	@JsonProperty('stringDateEnd', String)
	stringDateEnd: string;
	@JsonProperty('stringDatePaid', String)
	stringDatePaid: string;
	@JsonProperty('description', String)
	description: string;
	@JsonProperty('totalTrips', Number)
	totalTrips: number;
	@JsonProperty('totalPickups', Number)
	totalPickups: number;
	@JsonProperty('totalCommuters', Number)
	totalCommuters: number;
	@JsonProperty('totalPoints', Number)
	totalPoints: number;
	@JsonProperty('userType', Number)
	userType: number;
	@JsonProperty('totalValue', Number)
	totalValue: number;
	@JsonProperty('percentageOfBudget', Number)
	percentageOfBudget: number;
	@JsonProperty('paid', Boolean)
	paid: boolean;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: DriverMarshalCampaignSummaryDTO object

	instance(data) {
	console.log('## setting up instance of: DriverMarshalCampaignSummaryDTO object')

	this.driverMarshalCampaignSummaryID = data.driverMarshalCampaignSummaryID;
	this.driverMarshalCampaignID = data.driverMarshalCampaignID;
	this.userID = data.userID;
	this.name = data.name;
	this.associationID = data.associationID;
	this.email = data.email;
	this.dateOfCalculation = data.dateOfCalculation;
	this.dateStart = data.dateStart;
	this.dateEnd = data.dateEnd;
	this.datePaid = data.datePaid;
	this.stringDateOfCalculation = data.stringDateOfCalculation;
	this.stringDateStart = data.stringDateStart;
	this.stringDateEnd = data.stringDateEnd;
	this.stringDatePaid = data.stringDatePaid;
	this.description = data.description;
	this.totalTrips = data.totalTrips;
	this.totalPickups = data.totalPickups;
	this.totalCommuters = data.totalCommuters;
	this.totalPoints = data.totalPoints;
	this.userType = data.userType;
	this.totalValue = data.totalValue;
	this.percentageOfBudget = data.percentageOfBudget;
	this.paid = data.paid;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	driverMarshalCampaignSummaryID: this.driverMarshalCampaignSummaryID,
	driverMarshalCampaignID: this.driverMarshalCampaignID,
	userID: this.userID,
	name: this.name,
	associationID: this.associationID,
	email: this.email,
	dateOfCalculation: this.dateOfCalculation,
	dateStart: this.dateStart,
	dateEnd: this.dateEnd,
	datePaid: this.datePaid,
	stringDateOfCalculation: this.stringDateOfCalculation,
	stringDateStart: this.stringDateStart,
	stringDateEnd: this.stringDateEnd,
	stringDatePaid: this.stringDatePaid,
	description: this.description,
	totalTrips: this.totalTrips,
	totalPickups: this.totalPickups,
	totalCommuters: this.totalCommuters,
	totalPoints: this.totalPoints,
	userType: this.userType,
	totalValue: this.totalValue,
	percentageOfBudget: this.percentageOfBudget,
	paid: this.paid,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: DriverMarshalCampaignSummaryDTO

@JsonObject('ExpiredRequestDTO')
export class ExpiredRequestDTO {
	@JsonProperty('expiredRequestID', String)
	expiredRequestID: string;
	@JsonProperty('commuterRequestID', String)
	commuterRequestID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('expiredByMinutes', Number)
	expiredByMinutes: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: ExpiredRequestDTO object

	instance(data) {
	console.log('## setting up instance of: ExpiredRequestDTO object')

	this.expiredRequestID = data.expiredRequestID;
	this.commuterRequestID = data.commuterRequestID;
	this.userID = data.userID;
	this.stringDate = data.stringDate;
	this.date = data.date;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.expiredByMinutes = data.expiredByMinutes;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	expiredRequestID: this.expiredRequestID,
	commuterRequestID: this.commuterRequestID,
	userID: this.userID,
	stringDate: this.stringDate,
	date: this.date,
	latitude: this.latitude,
	longitude: this.longitude,
	expiredByMinutes: this.expiredByMinutes,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: ExpiredRequestDTO

@JsonObject('FCMData')
export class FCMData {
	@JsonProperty('fromUser', String)
	fromUser: string;
	@JsonProperty('message', String)
	message: string;
	@JsonProperty('title', String)
	title: string;
	@JsonProperty('announcementID', String)
	announcementID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('json', String)
	json: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('expiryDate', Number)
	expiryDate: number;
	@JsonProperty('messageType', Number)
	messageType: number;
	static ANNOUNCEMENT = 0;
	static TRIP = 0;
	static INCIDENT = 0;
	static WELCOME = 0;
	static OTHER = 0;
	static COMMUTER_REQUEST = 0;
	static VEHICLE_LOCATION_REQUEST = 0;
	static VEHICLE_LOCATION_REQUEST_RESPONSE = 0;
	static RATING = 0;
	static ROUTE_UPDATE_TRIGGER = 0;
	static ROUTE_BUILDER_MESSAGE = 0;
	static ROUTE_ADDED = 0;
	static LANDMARK_ADDED = 0;
	static ROUTE_BUILDER_LOCATION_REQUEST = 0;
	static ROUTE_BUILDER_LOCATION_RESPONSE = 0;
	static USER_ADDED = 0;
	static ROUTE_DELETED = 0;
	static ROUTE_UPDATED = 0;
	static LANDMARK_DELETED = 0;
	static LANDMARK_UPDATED = 0;
	static FREE_RIDE_VOUCHER = 0;
	static FREE_RIDE_VOUCHER_REDEEMED = 0;
	static PICK_UP = 0;
	static PANIC = 0;
	static PANIC_OVER = 0;
	static MOVING_VEHICLE = 0;
	static MOVING_COMMUTER = 0;
	static HEART_BEAT = 0;
	static STOPPING_VEHICLE = 0;
	static TAXI_FEES = 0;
	static HYPERTRACK_TRIP_STARTED = 0;
	static HYPERTRACK_TRIP_ENDED = 0;
	static HYPERTRACK_STOP_STARTED = 0;
	static HYPERTRACK_STOP_ENDED = 0;
	static HYPERTRACK_USER_EVENT = 0;
	static PROBLEM_RESOLVED = 0;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: FCMData object

	instance(data) {
	console.log('## setting up instance of: FCMData object')

	this.fromUser = data.fromUser;
	this.message = data.message;
	this.title = data.title;
	this.announcementID = data.announcementID;
	this.userID = data.userID;
	this.json = data.json;
	this.date = data.date;
	this.expiryDate = data.expiryDate;
	this.messageType = data.messageType;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	fromUser: this.fromUser,
	message: this.message,
	title: this.title,
	announcementID: this.announcementID,
	userID: this.userID,
	json: this.json,
	date: this.date,
	expiryDate: this.expiryDate,
	messageType: this.messageType,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: FCMData

@JsonObject('FavouriteDTO')
export class FavouriteDTO {
	@JsonProperty('favouriteID', Number)
	favouriteID: number;
	@JsonProperty('commuterID', Number)
	commuterID: number;
	@JsonProperty('cityID', Number)
	cityID: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: FavouriteDTO object

	instance(data) {
	console.log('## setting up instance of: FavouriteDTO object')

	this.favouriteID = data.favouriteID;
	this.commuterID = data.commuterID;
	this.cityID = data.cityID;
	this.date = data.date;
	this.status = data.status;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	favouriteID: this.favouriteID,
	commuterID: this.commuterID,
	cityID: this.cityID,
	date: this.date,
	status: this.status,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: FavouriteDTO

@JsonObject('FreeRideCampaignDTO')
export class FreeRideCampaignDTO {
	@JsonProperty('freeRideCampaignID', String)
	freeRideCampaignID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('driverID', String)
	driverID: string;
	@JsonProperty('driverName', String)
	driverName: string;
	@JsonProperty('ownerName', String)
	ownerName: string;
	@JsonProperty('ownerID', String)
	ownerID: string;
	@JsonProperty('freeRideRandomizer', Number)
	freeRideRandomizer: number;
	@JsonProperty('startDate', Number)
	startDate: number;
	@JsonProperty('endDate', Number)
	endDate: number;
	@JsonProperty('freeRideMax', Number)
	freeRideMax: number;
	@JsonProperty('stringStartDate', String)
	stringStartDate: string;
	@JsonProperty('stringEndDate', String)
	stringEndDate: string;
	static ALL_FREE = 0;
	static NONE_FREE = 0;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: FreeRideCampaignDTO object

	instance(data) {
	console.log('## setting up instance of: FreeRideCampaignDTO object')

	this.freeRideCampaignID = data.freeRideCampaignID;
	this.associationID = data.associationID;
	this.associationName = data.associationName;
	this.driverID = data.driverID;
	this.driverName = data.driverName;
	this.ownerName = data.ownerName;
	this.ownerID = data.ownerID;
	this.freeRideRandomizer = data.freeRideRandomizer;
	this.startDate = data.startDate;
	this.endDate = data.endDate;
	this.freeRideMax = data.freeRideMax;
	this.stringStartDate = data.stringStartDate;
	this.stringEndDate = data.stringEndDate;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	freeRideCampaignID: this.freeRideCampaignID,
	associationID: this.associationID,
	associationName: this.associationName,
	driverID: this.driverID,
	driverName: this.driverName,
	ownerName: this.ownerName,
	ownerID: this.ownerID,
	freeRideRandomizer: this.freeRideRandomizer,
	startDate: this.startDate,
	endDate: this.endDate,
	freeRideMax: this.freeRideMax,
	stringStartDate: this.stringStartDate,
	stringEndDate: this.stringEndDate,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: FreeRideCampaignDTO

@JsonObject('FreeRideVoucherDTO')
export class FreeRideVoucherDTO {
	@JsonProperty('freeRideVoucherID', String)
	freeRideVoucherID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('stringVoucherDate', String)
	stringVoucherDate: string;
	@JsonProperty('freeRideCampaignID', String)
	freeRideCampaignID: string;
	@JsonProperty('driverID', String)
	driverID: string;
	@JsonProperty('driverName', String)
	driverName: string;
	@JsonProperty('userEmail', String)
	userEmail: string;
	@JsonProperty('marshalID', String)
	marshalID: string;
	@JsonProperty('marshalName', String)
	marshalName: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('vehicleReg', String)
	vehicleReg: string;
	@JsonProperty('stringDateRegistered', String)
	stringDateRegistered: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('stringDateRedeemed', String)
	stringDateRedeemed: string;
	@JsonProperty('userFCMtoken', String)
	userFCMtoken: string;
	@JsonProperty('driverFCMToken', String)
	driverFCMToken: string;
	@JsonProperty()
	userDTO: UserDTO;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty('pickUpDate', Number)
	pickUpDate: number;
	@JsonProperty('voucherDate', Number)
	voucherDate: number;
	@JsonProperty('dateRegistered', Number)
	dateRegistered: number;
	@JsonProperty('dateRedeemed', Number)
	dateRedeemed: number;
	@JsonProperty('redeemed', Boolean)
	redeemed: boolean;
	@JsonProperty('numberOfRequests', Number)
	numberOfRequests: number;
	@JsonProperty('totalPassengers', Number)
	totalPassengers: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: FreeRideVoucherDTO object

	instance(data) {
	console.log('## setting up instance of: FreeRideVoucherDTO object')

	this.freeRideVoucherID = data.freeRideVoucherID;
	this.associationID = data.associationID;
	this.userID = data.userID;
	this.stringVoucherDate = data.stringVoucherDate;
	this.freeRideCampaignID = data.freeRideCampaignID;
	this.driverID = data.driverID;
	this.driverName = data.driverName;
	this.userEmail = data.userEmail;
	this.marshalID = data.marshalID;
	this.marshalName = data.marshalName;
	this.vehicleID = data.vehicleID;
	this.vehicleReg = data.vehicleReg;
	this.stringDateRegistered = data.stringDateRegistered;
	this.routeID = data.routeID;
	this.routeName = data.routeName;
	this.stringDateRedeemed = data.stringDateRedeemed;
	this.userFCMtoken = data.userFCMtoken;
	this.driverFCMToken = data.driverFCMToken;
	this.userDTO = data.userDTO;
	this.vehicle = data.vehicle;
	this.pickUpDate = data.pickUpDate;
	this.voucherDate = data.voucherDate;
	this.dateRegistered = data.dateRegistered;
	this.dateRedeemed = data.dateRedeemed;
	this.redeemed = data.redeemed;
	this.numberOfRequests = data.numberOfRequests;
	this.totalPassengers = data.totalPassengers;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	freeRideVoucherID: this.freeRideVoucherID,
	associationID: this.associationID,
	userID: this.userID,
	stringVoucherDate: this.stringVoucherDate,
	freeRideCampaignID: this.freeRideCampaignID,
	driverID: this.driverID,
	driverName: this.driverName,
	userEmail: this.userEmail,
	marshalID: this.marshalID,
	marshalName: this.marshalName,
	vehicleID: this.vehicleID,
	vehicleReg: this.vehicleReg,
	stringDateRegistered: this.stringDateRegistered,
	routeID: this.routeID,
	routeName: this.routeName,
	stringDateRedeemed: this.stringDateRedeemed,
	userFCMtoken: this.userFCMtoken,
	driverFCMToken: this.driverFCMToken,
	userDTO: this.userDTO,
	vehicle: this.vehicle,
	pickUpDate: this.pickUpDate,
	voucherDate: this.voucherDate,
	dateRegistered: this.dateRegistered,
	dateRedeemed: this.dateRedeemed,
	redeemed: this.redeemed,
	numberOfRequests: this.numberOfRequests,
	totalPassengers: this.totalPassengers,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: FreeRideVoucherDTO

@JsonObject('FullTaxiDTO')
export class FullTaxiDTO {
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('ownerID', String)
	ownerID: string;
	@JsonProperty('driverID', String)
	driverID: string;
	@JsonProperty('marshalID', String)
	marshalID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('ownerName', String)
	ownerName: string;
	@JsonProperty('driverName', String)
	driverName: string;
	@JsonProperty('marshalName', String)
	marshalName: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: FullTaxiDTO object

	instance(data) {
	console.log('## setting up instance of: FullTaxiDTO object')

	this.associationID = data.associationID;
	this.ownerID = data.ownerID;
	this.driverID = data.driverID;
	this.marshalID = data.marshalID;
	this.vehicleID = data.vehicleID;
	this.stringDate = data.stringDate;
	this.associationName = data.associationName;
	this.ownerName = data.ownerName;
	this.driverName = data.driverName;
	this.marshalName = data.marshalName;
	this.date = data.date;
	this.vehicle = data.vehicle;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	associationID: this.associationID,
	ownerID: this.ownerID,
	driverID: this.driverID,
	marshalID: this.marshalID,
	vehicleID: this.vehicleID,
	stringDate: this.stringDate,
	associationName: this.associationName,
	ownerName: this.ownerName,
	driverName: this.driverName,
	marshalName: this.marshalName,
	date: this.date,
	vehicle: this.vehicle,
	latitude: this.latitude,
	longitude: this.longitude,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: FullTaxiDTO

@JsonObject('HeartbeatDTO')
export class HeartbeatDTO {
	@JsonProperty('heartbeatID', String)
	heartbeatID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('userName', String)
	userName: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: HeartbeatDTO object

	instance(data) {
	console.log('## setting up instance of: HeartbeatDTO object')

	this.heartbeatID = data.heartbeatID;
	this.userID = data.userID;
	this.userName = data.userName;
	this.stringDate = data.stringDate;
	this.fcmToken = data.fcmToken;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	heartbeatID: this.heartbeatID,
	userID: this.userID,
	userName: this.userName,
	stringDate: this.stringDate,
	fcmToken: this.fcmToken,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: HeartbeatDTO

@JsonObject('IncidentDTO')
export class IncidentDTO {
	@JsonProperty('incidentID', String)
	incidentID: string;
	@JsonProperty('description', String)
	description: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('incidentType', String)
	incidentType: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('address', String)
	address: string;
	@JsonProperty()
	patroller: UserDTO;
	@JsonProperty()
	marshal: UserDTO;
	@JsonProperty()
	administrator: UserDTO;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('dateReported', Number)
	dateReported: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: IncidentDTO object

	instance(data) {
	console.log('## setting up instance of: IncidentDTO object')

	this.incidentID = data.incidentID;
	this.description = data.description;
	this.associationID = data.associationID;
	this.routeID = data.routeID;
	this.landmarkID = data.landmarkID;
	this.routeName = data.routeName;
	this.landmarkName = data.landmarkName;
	this.associationName = data.associationName;
	this.incidentType = data.incidentType;
	this.fcmToken = data.fcmToken;
	this.stringDate = data.stringDate;
	this.countryID = data.countryID;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.address = data.address;
	this.patroller = data.patroller;
	this.marshal = data.marshal;
	this.administrator = data.administrator;
	this.date = data.date;
	this.dateReported = data.dateReported;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	incidentID: this.incidentID,
	description: this.description,
	associationID: this.associationID,
	routeID: this.routeID,
	landmarkID: this.landmarkID,
	routeName: this.routeName,
	landmarkName: this.landmarkName,
	associationName: this.associationName,
	incidentType: this.incidentType,
	fcmToken: this.fcmToken,
	stringDate: this.stringDate,
	countryID: this.countryID,
	latitude: this.latitude,
	longitude: this.longitude,
	address: this.address,
	patroller: this.patroller,
	marshal: this.marshal,
	administrator: this.administrator,
	date: this.date,
	dateReported: this.dateReported,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: IncidentDTO

@JsonObject('LandmarkDTO')
export class LandmarkDTO {
	@JsonProperty('TAG', String)
	TAG: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('provinceID', String)
	provinceID: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('rankSequenceNumber', Number)
	rankSequenceNumber: number;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('accuracy', Number)
	accuracy: number;
	@JsonProperty('cacheDate', Number)
	cacheDate: number;
	@JsonProperty()
	routeBuilder: UserDTO;
	@JsonProperty('gpsScanned', Boolean)
	gpsScanned: boolean;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('distanceFromMe', Number)
	distanceFromMe: number;
	@JsonProperty()
	mainRank: MainRankDTO;
	@JsonProperty('thisIsMainRank', Boolean)
	thisIsMainRank: boolean;
	@JsonProperty('virtualLandmark', Boolean)
	virtualLandmark: boolean;
	@JsonProperty('sortByRankSequence', Boolean)
	sortByRankSequence: boolean;
	@JsonProperty('sortByName', Boolean)
	sortByName: boolean;
	@JsonProperty('sortByDistance', Boolean)
	sortByDistance: boolean;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: LandmarkDTO object

	instance(data) {
	console.log('## setting up instance of: LandmarkDTO object')

	this.TAG = data.TAG;
	this.landmarkID = data.landmarkID;
	this.cityID = data.cityID;
	this.associationID = data.associationID;
	this.routeID = data.routeID;
	this.countryID = data.countryID;
	this.provinceID = data.provinceID;
	this.routeName = data.routeName;
	this.associationName = data.associationName;
	this.rankSequenceNumber = data.rankSequenceNumber;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.accuracy = data.accuracy;
	this.cacheDate = data.cacheDate;
	this.routeBuilder = data.routeBuilder;
	this.gpsScanned = data.gpsScanned;
	this.landmarkName = data.landmarkName;
	this.status = data.status;
	this.cityName = data.cityName;
	this.stringDate = data.stringDate;
	this.date = data.date;
	this.distanceFromMe = data.distanceFromMe;
	this.mainRank = data.mainRank;
	this.thisIsMainRank = data.thisIsMainRank;
	this.virtualLandmark = data.virtualLandmark;
	this.sortByRankSequence = data.sortByRankSequence;
	this.sortByName = data.sortByName;
	this.sortByDistance = data.sortByDistance;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	TAG: this.TAG,
	landmarkID: this.landmarkID,
	cityID: this.cityID,
	associationID: this.associationID,
	routeID: this.routeID,
	countryID: this.countryID,
	provinceID: this.provinceID,
	routeName: this.routeName,
	associationName: this.associationName,
	rankSequenceNumber: this.rankSequenceNumber,
	latitude: this.latitude,
	longitude: this.longitude,
	accuracy: this.accuracy,
	cacheDate: this.cacheDate,
	routeBuilder: this.routeBuilder,
	gpsScanned: this.gpsScanned,
	landmarkName: this.landmarkName,
	status: this.status,
	cityName: this.cityName,
	stringDate: this.stringDate,
	date: this.date,
	distanceFromMe: this.distanceFromMe,
	mainRank: this.mainRank,
	thisIsMainRank: this.thisIsMainRank,
	virtualLandmark: this.virtualLandmark,
	sortByRankSequence: this.sortByRankSequence,
	sortByName: this.sortByName,
	sortByDistance: this.sortByDistance,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: LandmarkDTO

@JsonObject('MainRankDTO')
export class MainRankDTO {
	@JsonProperty('nickName', String)
	nickName: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: MainRankDTO object

	instance(data) {
	console.log('## setting up instance of: MainRankDTO object')

	this.nickName = data.nickName;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	nickName: this.nickName,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: MainRankDTO

@JsonObject('MarshalArrivalDTO')
export class MarshalArrivalDTO {
	@JsonProperty('arrivalID', String)
	arrivalID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('dateArrived', Number)
	dateArrived: number;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty()
	device: DeviceDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: MarshalArrivalDTO object

	instance(data) {
	console.log('## setting up instance of: MarshalArrivalDTO object')

	this.arrivalID = data.arrivalID;
	this.landmarkID = data.landmarkID;
	this.landmarkName = data.landmarkName;
	this.userID = data.userID;
	this.cityID = data.cityID;
	this.cityName = data.cityName;
	this.routeID = data.routeID;
	this.vehicleID = data.vehicleID;
	this.countryID = data.countryID;
	this.dateArrived = data.dateArrived;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.stringDate = data.stringDate;
	this.device = data.device;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	arrivalID: this.arrivalID,
	landmarkID: this.landmarkID,
	landmarkName: this.landmarkName,
	userID: this.userID,
	cityID: this.cityID,
	cityName: this.cityName,
	routeID: this.routeID,
	vehicleID: this.vehicleID,
	countryID: this.countryID,
	dateArrived: this.dateArrived,
	latitude: this.latitude,
	longitude: this.longitude,
	stringDate: this.stringDate,
	device: this.device,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: MarshalArrivalDTO

@JsonObject('MarshalDepartureDTO')
export class MarshalDepartureDTO {
	@JsonProperty('departureID', String)
	departureID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('dateDeparted', Number)
	dateDeparted: number;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty()
	device: DeviceDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: MarshalDepartureDTO object

	instance(data) {
	console.log('## setting up instance of: MarshalDepartureDTO object')

	this.departureID = data.departureID;
	this.landmarkID = data.landmarkID;
	this.landmarkName = data.landmarkName;
	this.userID = data.userID;
	this.cityID = data.cityID;
	this.cityName = data.cityName;
	this.routeID = data.routeID;
	this.countryID = data.countryID;
	this.dateDeparted = data.dateDeparted;
	this.stringDate = data.stringDate;
	this.device = data.device;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	departureID: this.departureID,
	landmarkID: this.landmarkID,
	landmarkName: this.landmarkName,
	userID: this.userID,
	cityID: this.cityID,
	cityName: this.cityName,
	routeID: this.routeID,
	countryID: this.countryID,
	dateDeparted: this.dateDeparted,
	stringDate: this.stringDate,
	device: this.device,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: MarshalDepartureDTO

@JsonObject('MarshalLandmarkDTO')
export class MarshalLandmarkDTO {
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('marshalName', String)
	marshalName: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: MarshalLandmarkDTO object

	instance(data) {
	console.log('## setting up instance of: MarshalLandmarkDTO object')

	this.userID = data.userID;
	this.landmarkID = data.landmarkID;
	this.associationID = data.associationID;
	this.landmarkName = data.landmarkName;
	this.marshalName = data.marshalName;
	this.stringDate = data.stringDate;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userID: this.userID,
	landmarkID: this.landmarkID,
	associationID: this.associationID,
	landmarkName: this.landmarkName,
	marshalName: this.marshalName,
	stringDate: this.stringDate,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: MarshalLandmarkDTO

@JsonObject('MarshalLogDTO')
export class MarshalLogDTO {
	@JsonProperty('marshalLogID', Number)
	marshalLogID: number;
	@JsonProperty('marshalID', Number)
	marshalID: number;
	@JsonProperty('landmarkID', Number)
	landmarkID: number;
	@JsonProperty('loginDate', Number)
	loginDate: number;
	@JsonProperty('logoutDate', Number)
	logoutDate: number;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: MarshalLogDTO object

	instance(data) {
	console.log('## setting up instance of: MarshalLogDTO object')

	this.marshalLogID = data.marshalLogID;
	this.marshalID = data.marshalID;
	this.landmarkID = data.landmarkID;
	this.loginDate = data.loginDate;
	this.logoutDate = data.logoutDate;
	this.status = data.status;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	marshalLogID: this.marshalLogID,
	marshalID: this.marshalID,
	landmarkID: this.landmarkID,
	loginDate: this.loginDate,
	logoutDate: this.logoutDate,
	status: this.status,
	latitude: this.latitude,
	longitude: this.longitude,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: MarshalLogDTO

@JsonObject('MarshalRouteDTO')
export class MarshalRouteDTO {
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('marshalRouteID', String)
	marshalRouteID: string;
	@JsonProperty('marshalID', String)
	marshalID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('marshalName', String)
	marshalName: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('date', Number)
	date: number;


//**** Handle this list: landmarkIDs

	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: MarshalRouteDTO object

	instance(data) {
	console.log('## setting up instance of: MarshalRouteDTO object')

	this.userID = data.userID;
	this.routeID = data.routeID;
	this.marshalRouteID = data.marshalRouteID;
	this.marshalID = data.marshalID;
	this.associationID = data.associationID;
	this.routeName = data.routeName;
	this.marshalName = data.marshalName;
	this.stringDate = data.stringDate;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userID: this.userID,
	routeID: this.routeID,
	marshalRouteID: this.marshalRouteID,
	marshalID: this.marshalID,
	associationID: this.associationID,
	routeName: this.routeName,
	marshalName: this.marshalName,
	stringDate: this.stringDate,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: MarshalRouteDTO

@JsonObject('MessageDTO')
export class MessageDTO {
	static DEFAULT_PREVIEW_MESSAGE_LENGTH = 0;
	@JsonProperty('mID', String)
	mID: string;
	@JsonProperty('recepientUserID', String)
	recepientUserID: string;
	@JsonProperty('senderUserID', String)
	senderUserID: string;
	@JsonProperty('messageBody', String)
	messageBody: string;
	@JsonProperty('mDate', String)
	mDate: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('notification', Boolean)
	notification: boolean;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty()
	device: DeviceDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: MessageDTO object

	instance(data) {
	console.log('## setting up instance of: MessageDTO object')

	this.mID = data.mID;
	this.recepientUserID = data.recepientUserID;
	this.senderUserID = data.senderUserID;
	this.messageBody = data.messageBody;
	this.mDate = data.mDate;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.notification = data.notification;
	this.date = data.date;
	this.device = data.device;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	mID: this.mID,
	recepientUserID: this.recepientUserID,
	senderUserID: this.senderUserID,
	messageBody: this.messageBody,
	mDate: this.mDate,
	latitude: this.latitude,
	longitude: this.longitude,
	notification: this.notification,
	date: this.date,
	device: this.device,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: MessageDTO

@JsonObject('PanicDTO')
export class PanicDTO {
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('panicID', String)
	panicID: string;
	@JsonProperty('userName', String)
	userName: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('panicType', String)
	panicType: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: PanicDTO object

	instance(data) {
	console.log('## setting up instance of: PanicDTO object')

	this.userID = data.userID;
	this.fcmToken = data.fcmToken;
	this.stringDate = data.stringDate;
	this.panicID = data.panicID;
	this.userName = data.userName;
	this.date = data.date;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.panicType = data.panicType;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userID: this.userID,
	fcmToken: this.fcmToken,
	stringDate: this.stringDate,
	panicID: this.panicID,
	userName: this.userName,
	date: this.date,
	latitude: this.latitude,
	longitude: this.longitude,
	panicType: this.panicType,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: PanicDTO

@JsonObject('PanicOverDTO')
export class PanicOverDTO {
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('panicID', String)
	panicID: string;
	@JsonProperty('userName', String)
	userName: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('panicType', String)
	panicType: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: PanicOverDTO object

	instance(data) {
	console.log('## setting up instance of: PanicOverDTO object')

	this.userID = data.userID;
	this.stringDate = data.stringDate;
	this.panicID = data.panicID;
	this.userName = data.userName;
	this.date = data.date;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.panicType = data.panicType;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userID: this.userID,
	stringDate: this.stringDate,
	panicID: this.panicID,
	userName: this.userName,
	date: this.date,
	latitude: this.latitude,
	longitude: this.longitude,
	panicType: this.panicType,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: PanicOverDTO

@JsonObject('PatrollerDTO')
export class PatrollerDTO {
	@JsonProperty('patrollerID', Number)
	patrollerID: number;
	@JsonProperty('gcmID', String)
	gcmID: string;
	@JsonProperty('address', String)
	address: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('email', String)
	email: string;
	@JsonProperty('phone', String)
	phone: string;
	@JsonProperty('password', String)
	password: string;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('idNo', String)
	idNo: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: PatrollerDTO object

	instance(data) {
	console.log('## setting up instance of: PatrollerDTO object')

	this.patrollerID = data.patrollerID;
	this.gcmID = data.gcmID;
	this.address = data.address;
	this.name = data.name;
	this.associationID = data.associationID;
	this.countryID = data.countryID;
	this.email = data.email;
	this.phone = data.phone;
	this.password = data.password;
	this.status = data.status;
	this.idNo = data.idNo;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	patrollerID: this.patrollerID,
	gcmID: this.gcmID,
	address: this.address,
	name: this.name,
	associationID: this.associationID,
	countryID: this.countryID,
	email: this.email,
	phone: this.phone,
	password: this.password,
	status: this.status,
	idNo: this.idNo,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: PatrollerDTO

@JsonObject('PhotoDTO')
export class PhotoDTO {
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('photoID', String)
	photoID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('incidentID', String)
	incidentID: string;
	@JsonProperty('announcementID', String)
	announcementID: string;
	@JsonProperty('stringDateTaken', String)
	stringDateTaken: string;
	@JsonProperty('stringDateUploaded', String)
	stringDateUploaded: string;
	@JsonProperty('dateTaken', Number)
	dateTaken: number;
	@JsonProperty('dateUploaded', Number)
	dateUploaded: number;
	@JsonProperty('width', Number)
	width: number;
	@JsonProperty('height', Number)
	height: number;
	@JsonProperty('bytes', Number)
	bytes: number;
	@JsonProperty('accuracy', Number)
	accuracy: number;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('defaultPhoto', Boolean)
	defaultPhoto: boolean;
	@JsonProperty('url', String)
	url: string;
	@JsonProperty('filePath', String)
	filePath: string;
	@JsonProperty('caption', String)
	caption: string;
	@JsonProperty('photoType', Number)
	photoType: number;
	static ASSOCIATION = 0;
	static ROUTE = 0;
	static LANDMARK = 0;
	static USER = 0;
	static CITY = 0;
	static COUNTRY = 0;
	static VEHICLE = 0;
	static INCIDENT = 0;
	static ANNOUNCEMENT = 0;
	@JsonProperty()
	device: DeviceDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: PhotoDTO object

	instance(data) {
	console.log('## setting up instance of: PhotoDTO object')

	this.countryID = data.countryID;
	this.cityID = data.cityID;
	this.photoID = data.photoID;
	this.userID = data.userID;
	this.vehicleID = data.vehicleID;
	this.landmarkID = data.landmarkID;
	this.routeID = data.routeID;
	this.associationID = data.associationID;
	this.incidentID = data.incidentID;
	this.announcementID = data.announcementID;
	this.stringDateTaken = data.stringDateTaken;
	this.stringDateUploaded = data.stringDateUploaded;
	this.dateTaken = data.dateTaken;
	this.dateUploaded = data.dateUploaded;
	this.width = data.width;
	this.height = data.height;
	this.bytes = data.bytes;
	this.accuracy = data.accuracy;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.defaultPhoto = data.defaultPhoto;
	this.url = data.url;
	this.filePath = data.filePath;
	this.caption = data.caption;
	this.photoType = data.photoType;
	this.device = data.device;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	countryID: this.countryID,
	cityID: this.cityID,
	photoID: this.photoID,
	userID: this.userID,
	vehicleID: this.vehicleID,
	landmarkID: this.landmarkID,
	routeID: this.routeID,
	associationID: this.associationID,
	incidentID: this.incidentID,
	announcementID: this.announcementID,
	stringDateTaken: this.stringDateTaken,
	stringDateUploaded: this.stringDateUploaded,
	dateTaken: this.dateTaken,
	dateUploaded: this.dateUploaded,
	width: this.width,
	height: this.height,
	bytes: this.bytes,
	accuracy: this.accuracy,
	latitude: this.latitude,
	longitude: this.longitude,
	defaultPhoto: this.defaultPhoto,
	url: this.url,
	filePath: this.filePath,
	caption: this.caption,
	photoType: this.photoType,
	device: this.device,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: PhotoDTO

@JsonObject('PickUpDTO')
export class PickUpDTO {
	@JsonProperty('pickupDate', Number)
	pickupDate: number;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('ownerID', String)
	ownerID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('vehicleReg', String)
	vehicleReg: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('ownerName', String)
	ownerName: string;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('stringPickUpDate', String)
	stringPickUpDate: string;
	@JsonProperty('pickUpID', String)
	pickUpID: string;
	@JsonProperty('driverID', String)
	driverID: string;
	@JsonProperty('marshalID', String)
	marshalID: string;
	@JsonProperty('driverName', String)
	driverName: string;
	@JsonProperty('marshalName', String)
	marshalName: string;
	@JsonProperty('commuterRequestID', String)
	commuterRequestID: string;
	@JsonProperty('userFCMtoken', String)
	userFCMtoken: string;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: PickUpDTO object

	instance(data) {
	console.log('## setting up instance of: PickUpDTO object')

	this.pickupDate = data.pickupDate;
	this.associationID = data.associationID;
	this.cityID = data.cityID;
	this.routeID = data.routeID;
	this.landmarkID = data.landmarkID;
	this.userID = data.userID;
	this.ownerID = data.ownerID;
	this.vehicleID = data.vehicleID;
	this.vehicleReg = data.vehicleReg;
	this.associationName = data.associationName;
	this.cityName = data.cityName;
	this.routeName = data.routeName;
	this.ownerName = data.ownerName;
	this.landmarkName = data.landmarkName;
	this.stringPickUpDate = data.stringPickUpDate;
	this.pickUpID = data.pickUpID;
	this.driverID = data.driverID;
	this.marshalID = data.marshalID;
	this.driverName = data.driverName;
	this.marshalName = data.marshalName;
	this.commuterRequestID = data.commuterRequestID;
	this.userFCMtoken = data.userFCMtoken;
	this.vehicle = data.vehicle;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	pickupDate: this.pickupDate,
	associationID: this.associationID,
	cityID: this.cityID,
	routeID: this.routeID,
	landmarkID: this.landmarkID,
	userID: this.userID,
	ownerID: this.ownerID,
	vehicleID: this.vehicleID,
	vehicleReg: this.vehicleReg,
	associationName: this.associationName,
	cityName: this.cityName,
	routeName: this.routeName,
	ownerName: this.ownerName,
	landmarkName: this.landmarkName,
	stringPickUpDate: this.stringPickUpDate,
	pickUpID: this.pickUpID,
	driverID: this.driverID,
	marshalID: this.marshalID,
	driverName: this.driverName,
	marshalName: this.marshalName,
	commuterRequestID: this.commuterRequestID,
	userFCMtoken: this.userFCMtoken,
	vehicle: this.vehicle,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: PickUpDTO

@JsonObject('PlaceDTO')
export class PlaceDTO {
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('googlePlaceID', String)
	googlePlaceID: string;
	@JsonProperty('placeID', String)
	placeID: string;
	@JsonProperty('address', String)
	address: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: PlaceDTO object

	instance(data) {
	console.log('## setting up instance of: PlaceDTO object')

	this.name = data.name;
	this.googlePlaceID = data.googlePlaceID;
	this.placeID = data.placeID;
	this.address = data.address;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	name: this.name,
	googlePlaceID: this.googlePlaceID,
	placeID: this.placeID,
	address: this.address,
	latitude: this.latitude,
	longitude: this.longitude,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: PlaceDTO

@JsonObject('ProblemResolvedDTO')
export class ProblemResolvedDTO {
	@JsonProperty('problemResolvedID', String)
	problemResolvedID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('message', String)
	message: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('stringProblemDate', String)
	stringProblemDate: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('problemDate', Number)
	problemDate: number;
	@JsonProperty('apologyID', String)
	apologyID: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: ProblemResolvedDTO object

	instance(data) {
	console.log('## setting up instance of: ProblemResolvedDTO object')

	this.problemResolvedID = data.problemResolvedID;
	this.userID = data.userID;
	this.message = data.message;
	this.fcmToken = data.fcmToken;
	this.stringDate = data.stringDate;
	this.stringProblemDate = data.stringProblemDate;
	this.date = data.date;
	this.problemDate = data.problemDate;
	this.apologyID = data.apologyID;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	problemResolvedID: this.problemResolvedID,
	userID: this.userID,
	message: this.message,
	fcmToken: this.fcmToken,
	stringDate: this.stringDate,
	stringProblemDate: this.stringProblemDate,
	date: this.date,
	problemDate: this.problemDate,
	apologyID: this.apologyID,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: ProblemResolvedDTO

@JsonObject('ProvinceDTO')
export class ProvinceDTO {
	@JsonProperty('provinceID', String)
	provinceID: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: ProvinceDTO object

	instance(data) {
	console.log('## setting up instance of: ProvinceDTO object')

	this.provinceID = data.provinceID;
	this.countryID = data.countryID;
	this.name = data.name;
	this.status = data.status;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	provinceID: this.provinceID,
	countryID: this.countryID,
	name: this.name,
	status: this.status,
	latitude: this.latitude,
	longitude: this.longitude,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: ProvinceDTO

@JsonObject('RankAggregateRatingDTO')
export class RankAggregateRatingDTO {
	@JsonProperty('aggregate', Number)
	aggregate: number;
	@JsonProperty('count', Number)
	count: number;
	@JsonProperty('total', Number)
	total: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RankAggregateRatingDTO object

	instance(data) {
	console.log('## setting up instance of: RankAggregateRatingDTO object')

	this.aggregate = data.aggregate;
	this.count = data.count;
	this.total = data.total;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	aggregate: this.aggregate,
	count: this.count,
	total: this.total,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RankAggregateRatingDTO

@JsonObject('RatingDTO')
export class RatingDTO {
	static DRIVER = 0;
	static TRIP = 0;
	static LANDMARK = 0;
	static VEHICLE = 0;
	static OVERALL_EXPERIENCE = 0;
	static SAFETY_RATING = 0;
	static QUESTION_RATING = 0;
	static TERRIBLE = 0;
	static POOR = 0;
	static AVERAGE = 0;
	static GOOD = 0;
	static EXCELLENT = 0;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('driverID', String)
	driverID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('marshalID', String)
	marshalID: string;
	@JsonProperty('tripID', String)
	tripID: string;
	@JsonProperty('ratingID', String)
	ratingID: string;
	@JsonProperty('ownerID', String)
	ownerID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('ratingType', Number)
	ratingType: number;
	@JsonProperty('ratingLevel', Number)
	ratingLevel: number;
	@JsonProperty('remarks', String)
	remarks: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('ratingTypeName', String)
	ratingTypeName: string;
	@JsonProperty('answer', String)
	answer: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('ratingDate', String)
	ratingDate: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('day', Number)
	day: number;
	@JsonProperty('month', Number)
	month: number;
	@JsonProperty('year', Number)
	year: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RatingDTO object

	instance(data) {
	console.log('## setting up instance of: RatingDTO object')

	this.userID = data.userID;
	this.routeID = data.routeID;
	this.landmarkID = data.landmarkID;
	this.driverID = data.driverID;
	this.vehicleID = data.vehicleID;
	this.marshalID = data.marshalID;
	this.tripID = data.tripID;
	this.ratingID = data.ratingID;
	this.ownerID = data.ownerID;
	this.associationID = data.associationID;
	this.ratingType = data.ratingType;
	this.ratingLevel = data.ratingLevel;
	this.remarks = data.remarks;
	this.fcmToken = data.fcmToken;
	this.ratingTypeName = data.ratingTypeName;
	this.answer = data.answer;
	this.stringDate = data.stringDate;
	this.ratingDate = data.ratingDate;
	this.date = data.date;
	this.day = data.day;
	this.month = data.month;
	this.year = data.year;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userID: this.userID,
	routeID: this.routeID,
	landmarkID: this.landmarkID,
	driverID: this.driverID,
	vehicleID: this.vehicleID,
	marshalID: this.marshalID,
	tripID: this.tripID,
	ratingID: this.ratingID,
	ownerID: this.ownerID,
	associationID: this.associationID,
	ratingType: this.ratingType,
	ratingLevel: this.ratingLevel,
	remarks: this.remarks,
	fcmToken: this.fcmToken,
	ratingTypeName: this.ratingTypeName,
	answer: this.answer,
	stringDate: this.stringDate,
	ratingDate: this.ratingDate,
	date: this.date,
	day: this.day,
	month: this.month,
	year: this.year,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RatingDTO

@JsonObject('RatingLevelDTO')
export class RatingLevelDTO {
	@JsonProperty('number', Number)
	number: number;
	@JsonProperty('description', String)
	description: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RatingLevelDTO object

	instance(data) {
	console.log('## setting up instance of: RatingLevelDTO object')

	this.number = data.number;
	this.description = data.description;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	number: this.number,
	description: this.description,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RatingLevelDTO

@JsonObject('RatingTypeAggregateDTO')
export class RatingTypeAggregateDTO {
	@JsonProperty('count', Number)
	count: number;
	@JsonProperty('total', Number)
	total: number;
	@JsonProperty('aggregate', Number)
	aggregate: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RatingTypeAggregateDTO object

	instance(data) {
	console.log('## setting up instance of: RatingTypeAggregateDTO object')

	this.count = data.count;
	this.total = data.total;
	this.aggregate = data.aggregate;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	count: this.count,
	total: this.total,
	aggregate: this.aggregate,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RatingTypeAggregateDTO

@JsonObject('RatingTypeDTO')
export class RatingTypeDTO {
	@JsonProperty('key', Number)
	key: number;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RatingTypeDTO object

	instance(data) {
	console.log('## setting up instance of: RatingTypeDTO object')

	this.key = data.key;
	this.name = data.name;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	key: this.key,
	name: this.name,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RatingTypeDTO

@JsonObject('RemoteConfigDTO')
export class RemoteConfigDTO {
	@JsonProperty('driversUUID', String)
	driversUUID: string;
	@JsonProperty('marshalsUUID', String)
	marshalsUUID: string;
	@JsonProperty('patrollersUUID', String)
	patrollersUUID: string;
	@JsonProperty('commutersUUID', String)
	commutersUUID: string;
	@JsonProperty('routeBuildersUUID', String)
	routeBuildersUUID: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RemoteConfigDTO object

	instance(data) {
	console.log('## setting up instance of: RemoteConfigDTO object')

	this.driversUUID = data.driversUUID;
	this.marshalsUUID = data.marshalsUUID;
	this.patrollersUUID = data.patrollersUUID;
	this.commutersUUID = data.commutersUUID;
	this.routeBuildersUUID = data.routeBuildersUUID;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	driversUUID: this.driversUUID,
	marshalsUUID: this.marshalsUUID,
	patrollersUUID: this.patrollersUUID,
	commutersUUID: this.commutersUUID,
	routeBuildersUUID: this.routeBuildersUUID,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RemoteConfigDTO

@JsonObject('RouteBuilderLocationRequestDTO')
export class RouteBuilderLocationRequestDTO {
	@JsonProperty('routeBuilderLocationRequestID', String)
	routeBuilderLocationRequestID: string;
	@JsonProperty('from', String)
	from: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RouteBuilderLocationRequestDTO object

	instance(data) {
	console.log('## setting up instance of: RouteBuilderLocationRequestDTO object')

	this.routeBuilderLocationRequestID = data.routeBuilderLocationRequestID;
	this.from = data.from;
	this.stringDate = data.stringDate;
	this.fcmToken = data.fcmToken;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	routeBuilderLocationRequestID: this.routeBuilderLocationRequestID,
	from: this.from,
	stringDate: this.stringDate,
	fcmToken: this.fcmToken,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RouteBuilderLocationRequestDTO

@JsonObject('RouteBuilderLocationResponseDTO')
export class RouteBuilderLocationResponseDTO {
	@JsonProperty('routeBuilderLocationResponseID', String)
	routeBuilderLocationResponseID: string;
	@JsonProperty('message', String)
	message: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('from', String)
	from: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('builderName', String)
	builderName: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RouteBuilderLocationResponseDTO object

	instance(data) {
	console.log('## setting up instance of: RouteBuilderLocationResponseDTO object')

	this.routeBuilderLocationResponseID = data.routeBuilderLocationResponseID;
	this.message = data.message;
	this.stringDate = data.stringDate;
	this.from = data.from;
	this.fcmToken = data.fcmToken;
	this.date = data.date;
	this.builderName = data.builderName;
	this.userID = data.userID;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	routeBuilderLocationResponseID: this.routeBuilderLocationResponseID,
	message: this.message,
	stringDate: this.stringDate,
	from: this.from,
	fcmToken: this.fcmToken,
	date: this.date,
	builderName: this.builderName,
	userID: this.userID,
	latitude: this.latitude,
	longitude: this.longitude,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RouteBuilderLocationResponseDTO

@JsonObject('RouteBuilderMessageDTO')
export class RouteBuilderMessageDTO {
	@JsonProperty('routeBuilderMessageID', String)
	routeBuilderMessageID: string;
	@JsonProperty('title', String)
	title: string;
	@JsonProperty('message', String)
	message: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('from', String)
	from: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RouteBuilderMessageDTO object

	instance(data) {
	console.log('## setting up instance of: RouteBuilderMessageDTO object')

	this.routeBuilderMessageID = data.routeBuilderMessageID;
	this.title = data.title;
	this.message = data.message;
	this.stringDate = data.stringDate;
	this.from = data.from;
	this.fcmToken = data.fcmToken;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	routeBuilderMessageID: this.routeBuilderMessageID,
	title: this.title,
	message: this.message,
	stringDate: this.stringDate,
	from: this.from,
	fcmToken: this.fcmToken,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RouteBuilderMessageDTO

@JsonObject('RouteDTO')
export class RouteDTO {
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('provinceID', String)
	provinceID: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('countryName', String)
	countryName: string;
	@JsonProperty('routeNumber', String)
	routeNumber: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('color', String)
	color: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('cacheDate', Number)
	cacheDate: number;
	@JsonProperty()
	routeBuilder: UserDTO;


//**** Handle this list: landmarkList

	@JsonProperty()
	builder: UserDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RouteDTO object

	instance(data) {
	console.log('## setting up instance of: RouteDTO object')

	this.routeID = data.routeID;
	this.associationID = data.associationID;
	this.countryID = data.countryID;
	this.provinceID = data.provinceID;
	this.cityID = data.cityID;
	this.name = data.name;
	this.status = data.status;
	this.associationName = data.associationName;
	this.cityName = data.cityName;
	this.countryName = data.countryName;
	this.routeNumber = data.routeNumber;
	this.stringDate = data.stringDate;
	this.color = data.color;
	this.date = data.date;
	this.cacheDate = data.cacheDate;
	this.routeBuilder = data.routeBuilder;
	this.builder = data.builder;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	routeID: this.routeID,
	associationID: this.associationID,
	countryID: this.countryID,
	provinceID: this.provinceID,
	cityID: this.cityID,
	name: this.name,
	status: this.status,
	associationName: this.associationName,
	cityName: this.cityName,
	countryName: this.countryName,
	routeNumber: this.routeNumber,
	stringDate: this.stringDate,
	color: this.color,
	date: this.date,
	cacheDate: this.cacheDate,
	routeBuilder: this.routeBuilder,
	builder: this.builder,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RouteDTO

@JsonObject('RoutePointDTO')
export class RoutePointDTO {
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RoutePointDTO object

	instance(data) {
	console.log('## setting up instance of: RoutePointDTO object')

	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	latitude: this.latitude,
	longitude: this.longitude,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RoutePointDTO

@JsonObject('RouteSnippetDTO')
export class RouteSnippetDTO {
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('nickName', String)
	nickName: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RouteSnippetDTO object

	instance(data) {
	console.log('## setting up instance of: RouteSnippetDTO object')

	this.routeID = data.routeID;
	this.routeName = data.routeName;
	this.cityID = data.cityID;
	this.cityName = data.cityName;
	this.nickName = data.nickName;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	routeID: this.routeID,
	routeName: this.routeName,
	cityID: this.cityID,
	cityName: this.cityName,
	nickName: this.nickName,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RouteSnippetDTO

@JsonObject('RouteUpdateTriggerDTO')
export class RouteUpdateTriggerDTO {
	@JsonProperty('routeUpdateTriggerID', String)
	routeUpdateTriggerID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: RouteUpdateTriggerDTO object

	instance(data) {
	console.log('## setting up instance of: RouteUpdateTriggerDTO object')

	this.routeUpdateTriggerID = data.routeUpdateTriggerID;
	this.associationID = data.associationID;
	this.associationName = data.associationName;
	this.stringDate = data.stringDate;
	this.routeID = data.routeID;
	this.routeName = data.routeName;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	routeUpdateTriggerID: this.routeUpdateTriggerID,
	associationID: this.associationID,
	associationName: this.associationName,
	stringDate: this.stringDate,
	routeID: this.routeID,
	routeName: this.routeName,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: RouteUpdateTriggerDTO

@JsonObject('SafetyAggregateRatingDTO')
export class SafetyAggregateRatingDTO {
	@JsonProperty('aggregate', Number)
	aggregate: number;
	@JsonProperty('count', Number)
	count: number;
	@JsonProperty('total', Number)
	total: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: SafetyAggregateRatingDTO object

	instance(data) {
	console.log('## setting up instance of: SafetyAggregateRatingDTO object')

	this.aggregate = data.aggregate;
	this.count = data.count;
	this.total = data.total;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	aggregate: this.aggregate,
	count: this.count,
	total: this.total,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: SafetyAggregateRatingDTO

@JsonObject('SearchVehicleDTO')
export class SearchVehicleDTO {
	@JsonProperty('vehicleID', Number)
	vehicleID: number;
	@JsonProperty('reg', String)
	reg: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: SearchVehicleDTO object

	instance(data) {
	console.log('## setting up instance of: SearchVehicleDTO object')

	this.vehicleID = data.vehicleID;
	this.reg = data.reg;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	vehicleID: this.vehicleID,
	reg: this.reg,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: SearchVehicleDTO

@JsonObject('SpatialInfoDTO')
export class SpatialInfoDTO {
	@JsonProperty('estimatedTime', Number)
	estimatedTime: number;
	@JsonProperty('distance', Number)
	distance: number;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('distanceID', String)
	distanceID: string;
	@JsonProperty('codedPath', String)
	codedPath: string;
	@JsonProperty('stringEstimatedTime', String)
	stringEstimatedTime: string;
	@JsonProperty('stringDistance', String)
	stringDistance: string;
	@JsonProperty()
	fromLandmark: LandmarkDTO;
	@JsonProperty()
	toLandmark: LandmarkDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: SpatialInfoDTO object

	instance(data) {
	console.log('## setting up instance of: SpatialInfoDTO object')

	this.estimatedTime = data.estimatedTime;
	this.distance = data.distance;
	this.routeID = data.routeID;
	this.distanceID = data.distanceID;
	this.codedPath = data.codedPath;
	this.stringEstimatedTime = data.stringEstimatedTime;
	this.stringDistance = data.stringDistance;
	this.fromLandmark = data.fromLandmark;
	this.toLandmark = data.toLandmark;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	estimatedTime: this.estimatedTime,
	distance: this.distance,
	routeID: this.routeID,
	distanceID: this.distanceID,
	codedPath: this.codedPath,
	stringEstimatedTime: this.stringEstimatedTime,
	stringDistance: this.stringDistance,
	fromLandmark: this.fromLandmark,
	toLandmark: this.toLandmark,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: SpatialInfoDTO

@JsonObject('StoppingVehicleDTO')
export class StoppingVehicleDTO {
	@JsonProperty('stoppingVehicleID', String)
	stoppingVehicleID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('vehicleReg', String)
	vehicleReg: string;
	@JsonProperty('ownerID', String)
	ownerID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty()
	user: UserDTO;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: StoppingVehicleDTO object

	instance(data) {
	console.log('## setting up instance of: StoppingVehicleDTO object')

	this.stoppingVehicleID = data.stoppingVehicleID;
	this.vehicleID = data.vehicleID;
	this.userID = data.userID;
	this.stringDate = data.stringDate;
	this.vehicleReg = data.vehicleReg;
	this.ownerID = data.ownerID;
	this.associationID = data.associationID;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.vehicle = data.vehicle;
	this.user = data.user;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	stoppingVehicleID: this.stoppingVehicleID,
	vehicleID: this.vehicleID,
	userID: this.userID,
	stringDate: this.stringDate,
	vehicleReg: this.vehicleReg,
	ownerID: this.ownerID,
	associationID: this.associationID,
	latitude: this.latitude,
	longitude: this.longitude,
	vehicle: this.vehicle,
	user: this.user,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: StoppingVehicleDTO

@JsonObject('TaxiFeesDTO')
export class TaxiFeesDTO {
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('driverID', String)
	driverID: string;
	@JsonProperty('marshalID', String)
	marshalID: string;
	@JsonProperty('patrollerID', String)
	patrollerID: string;
	@JsonProperty('taxiFeesID', String)
	taxiFeesID: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('adminID', String)
	adminID: string;
	@JsonProperty('ownerID', String)
	ownerID: string;
	@JsonProperty('amount', Number)
	amount: number;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty()
	driver: UserDTO;
	@JsonProperty()
	marshal: UserDTO;
	@JsonProperty()
	patroller: UserDTO;
	@JsonProperty()
	administrator: UserDTO;
	@JsonProperty()
	owner: UserDTO;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: TaxiFeesDTO object

	instance(data) {
	console.log('## setting up instance of: TaxiFeesDTO object')

	this.associationID = data.associationID;
	this.vehicleID = data.vehicleID;
	this.driverID = data.driverID;
	this.marshalID = data.marshalID;
	this.patrollerID = data.patrollerID;
	this.taxiFeesID = data.taxiFeesID;
	this.associationName = data.associationName;
	this.adminID = data.adminID;
	this.ownerID = data.ownerID;
	this.amount = data.amount;
	this.vehicle = data.vehicle;
	this.driver = data.driver;
	this.marshal = data.marshal;
	this.patroller = data.patroller;
	this.administrator = data.administrator;
	this.owner = data.owner;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	associationID: this.associationID,
	vehicleID: this.vehicleID,
	driverID: this.driverID,
	marshalID: this.marshalID,
	patrollerID: this.patrollerID,
	taxiFeesID: this.taxiFeesID,
	associationName: this.associationName,
	adminID: this.adminID,
	ownerID: this.ownerID,
	amount: this.amount,
	vehicle: this.vehicle,
	driver: this.driver,
	marshal: this.marshal,
	patroller: this.patroller,
	administrator: this.administrator,
	owner: this.owner,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: TaxiFeesDTO

@JsonObject('TravelBuddyDTO')
export class TravelBuddyDTO {
	@JsonProperty('travelBuddyID', String)
	travelBuddyID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('buddyID', String)
	buddyID: string;
	@JsonProperty('buddyName', String)
	buddyName: string;
	@JsonProperty('buddyEmail', String)
	buddyEmail: string;
	@JsonProperty('buddyPhone', String)
	buddyPhone: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('buddyFCMtoken', String)
	buddyFCMtoken: string;
	@JsonProperty('active', Boolean)
	active: boolean;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: TravelBuddyDTO object

	instance(data) {
	console.log('## setting up instance of: TravelBuddyDTO object')

	this.travelBuddyID = data.travelBuddyID;
	this.userID = data.userID;
	this.buddyID = data.buddyID;
	this.buddyName = data.buddyName;
	this.buddyEmail = data.buddyEmail;
	this.buddyPhone = data.buddyPhone;
	this.stringDate = data.stringDate;
	this.date = data.date;
	this.buddyFCMtoken = data.buddyFCMtoken;
	this.active = data.active;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	travelBuddyID: this.travelBuddyID,
	userID: this.userID,
	buddyID: this.buddyID,
	buddyName: this.buddyName,
	buddyEmail: this.buddyEmail,
	buddyPhone: this.buddyPhone,
	stringDate: this.stringDate,
	date: this.date,
	buddyFCMtoken: this.buddyFCMtoken,
	active: this.active,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: TravelBuddyDTO

@JsonObject('TripDTO')
export class TripDTO {
	@JsonProperty('tripID', String)
	tripID: string;
	@JsonProperty('marshalID', String)
	marshalID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('driverID', String)
	driverID: string;
	@JsonProperty('ownerID', String)
	ownerID: string;
	@JsonProperty('numberOfPassengers', Number)
	numberOfPassengers: number;
	@JsonProperty('dateDispatched', Number)
	dateDispatched: number;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty()
	marshall: UserDTO;
	@JsonProperty()
	driver: UserDTO;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('stringDateDispatched', String)
	stringDateDispatched: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('associatioName', String)
	associatioName: string;
	@JsonProperty('scanned', Boolean)
	scanned: boolean;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: TripDTO object

	instance(data) {
	console.log('## setting up instance of: TripDTO object')

	this.tripID = data.tripID;
	this.marshalID = data.marshalID;
	this.landmarkID = data.landmarkID;
	this.vehicleID = data.vehicleID;
	this.routeID = data.routeID;
	this.associationID = data.associationID;
	this.driverID = data.driverID;
	this.ownerID = data.ownerID;
	this.numberOfPassengers = data.numberOfPassengers;
	this.dateDispatched = data.dateDispatched;
	this.vehicle = data.vehicle;
	this.marshall = data.marshall;
	this.driver = data.driver;
	this.landmarkName = data.landmarkName;
	this.status = data.status;
	this.stringDateDispatched = data.stringDateDispatched;
	this.cityName = data.cityName;
	this.routeName = data.routeName;
	this.associatioName = data.associatioName;
	this.scanned = data.scanned;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	tripID: this.tripID,
	marshalID: this.marshalID,
	landmarkID: this.landmarkID,
	vehicleID: this.vehicleID,
	routeID: this.routeID,
	associationID: this.associationID,
	driverID: this.driverID,
	ownerID: this.ownerID,
	numberOfPassengers: this.numberOfPassengers,
	dateDispatched: this.dateDispatched,
	vehicle: this.vehicle,
	marshall: this.marshall,
	driver: this.driver,
	landmarkName: this.landmarkName,
	status: this.status,
	stringDateDispatched: this.stringDateDispatched,
	cityName: this.cityName,
	routeName: this.routeName,
	associatioName: this.associatioName,
	scanned: this.scanned,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: TripDTO

@JsonObject('TripLogDTO')
export class TripLogDTO {
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('tripStartDate', Number)
	tripStartDate: number;
	@JsonProperty('tripLogID', String)
	tripLogID: string;
	@JsonProperty('tripID', String)
	tripID: string;
	@JsonProperty('driverID', String)
	driverID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('dispatchVehicleID', String)
	dispatchVehicleID: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('dispatchLandmarkID', String)
	dispatchLandmarkID: string;
	@JsonProperty('dispatchLandmarkName', String)
	dispatchLandmarkName: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty()
	driver: UserDTO;
	@JsonProperty('accuracy', Number)
	accuracy: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: TripLogDTO object

	instance(data) {
	console.log('## setting up instance of: TripLogDTO object')

	this.vehicle = data.vehicle;
	this.date = data.date;
	this.tripStartDate = data.tripStartDate;
	this.tripLogID = data.tripLogID;
	this.tripID = data.tripID;
	this.driverID = data.driverID;
	this.vehicleID = data.vehicleID;
	this.dispatchVehicleID = data.dispatchVehicleID;
	this.routeID = data.routeID;
	this.routeName = data.routeName;
	this.stringDate = data.stringDate;
	this.dispatchLandmarkID = data.dispatchLandmarkID;
	this.dispatchLandmarkName = data.dispatchLandmarkName;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.driver = data.driver;
	this.accuracy = data.accuracy;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	vehicle: this.vehicle,
	date: this.date,
	tripStartDate: this.tripStartDate,
	tripLogID: this.tripLogID,
	tripID: this.tripID,
	driverID: this.driverID,
	vehicleID: this.vehicleID,
	dispatchVehicleID: this.dispatchVehicleID,
	routeID: this.routeID,
	routeName: this.routeName,
	stringDate: this.stringDate,
	dispatchLandmarkID: this.dispatchLandmarkID,
	dispatchLandmarkName: this.dispatchLandmarkName,
	latitude: this.latitude,
	longitude: this.longitude,
	driver: this.driver,
	accuracy: this.accuracy,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: TripLogDTO

@JsonObject('UserArrivedAtWorkDTO')
export class UserArrivedAtWorkDTO {
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('userDescription', String)
	userDescription: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('userType', Number)
	userType: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: UserArrivedAtWorkDTO object

	instance(data) {
	console.log('## setting up instance of: UserArrivedAtWorkDTO object')

	this.userID = data.userID;
	this.name = data.name;
	this.associationID = data.associationID;
	this.userDescription = data.userDescription;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.date = data.date;
	this.userType = data.userType;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userID: this.userID,
	name: this.name,
	associationID: this.associationID,
	userDescription: this.userDescription,
	latitude: this.latitude,
	longitude: this.longitude,
	date: this.date,
	userType: this.userType,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: UserArrivedAtWorkDTO

@JsonObject('UserDTO')
export class UserDTO {
	@JsonProperty('userType', Number)
	userType: number;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('uid', String)
	uid: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('email', String)
	email: string;
	@JsonProperty('cellphone', String)
	cellphone: string;
	@JsonProperty('password', String)
	password: string;
	@JsonProperty('userDescription', String)
	userDescription: string;
	@JsonProperty('stringDateRegistered', String)
	stringDateRegistered: string;
	@JsonProperty('hyperTrackUserID', String)
	hyperTrackUserID: string;
	@JsonProperty()
	morningLandmark: LandmarkDTO;
	@JsonProperty()
	afternoonLandmark: LandmarkDTO;
	@JsonProperty('dateRegistered', Number)
	dateRegistered: number;
	@JsonProperty('activeFlag', Boolean)
	activeFlag: boolean;
	@JsonProperty('researchConsent', Boolean)
	researchConsent: boolean;
	@JsonProperty('gender', String)
	gender: string;
	@JsonProperty('address', String)
	address: string;
	@JsonProperty('idNumber', String)
	idNumber: string;
	@JsonProperty()
	device: DeviceDTO;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: UserDTO object

	instance(data) {
	console.log('## setting up instance of: UserDTO object')

	this.userType = data.userType;
	this.userID = data.userID;
	this.uid = data.uid;
	this.name = data.name;
	this.countryID = data.countryID;
	this.associationID = data.associationID;
	this.associationName = data.associationName;
	this.fcmToken = data.fcmToken;
	this.email = data.email;
	this.cellphone = data.cellphone;
	this.password = data.password;
	this.userDescription = data.userDescription;
	this.stringDateRegistered = data.stringDateRegistered;
	this.hyperTrackUserID = data.hyperTrackUserID;
	this.morningLandmark = data.morningLandmark;
	this.afternoonLandmark = data.afternoonLandmark;
	this.dateRegistered = data.dateRegistered;
	this.activeFlag = data.activeFlag;
	this.researchConsent = data.researchConsent;
	this.gender = data.gender;
	this.address = data.address;
	this.idNumber = data.idNumber;
	this.device = data.device;
	this.vehicle = data.vehicle;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userType: this.userType,
	userID: this.userID,
	uid: this.uid,
	name: this.name,
	countryID: this.countryID,
	associationID: this.associationID,
	associationName: this.associationName,
	fcmToken: this.fcmToken,
	email: this.email,
	cellphone: this.cellphone,
	password: this.password,
	userDescription: this.userDescription,
	stringDateRegistered: this.stringDateRegistered,
	hyperTrackUserID: this.hyperTrackUserID,
	morningLandmark: this.morningLandmark,
	afternoonLandmark: this.afternoonLandmark,
	dateRegistered: this.dateRegistered,
	activeFlag: this.activeFlag,
	researchConsent: this.researchConsent,
	gender: this.gender,
	address: this.address,
	idNumber: this.idNumber,
	device: this.device,
	vehicle: this.vehicle,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: UserDTO

@JsonObject('UserFinishedWalkingDTO')
export class UserFinishedWalkingDTO {
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('userDescription', String)
	userDescription: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('userType', Number)
	userType: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: UserFinishedWalkingDTO object

	instance(data) {
	console.log('## setting up instance of: UserFinishedWalkingDTO object')

	this.userID = data.userID;
	this.name = data.name;
	this.associationID = data.associationID;
	this.userDescription = data.userDescription;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.date = data.date;
	this.userType = data.userType;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userID: this.userID,
	name: this.name,
	associationID: this.associationID,
	userDescription: this.userDescription,
	latitude: this.latitude,
	longitude: this.longitude,
	date: this.date,
	userType: this.userType,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: UserFinishedWalkingDTO

@JsonObject('UserLeftWorkDTO')
export class UserLeftWorkDTO {
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('userDescription', String)
	userDescription: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('userType', Number)
	userType: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: UserLeftWorkDTO object

	instance(data) {
	console.log('## setting up instance of: UserLeftWorkDTO object')

	this.userID = data.userID;
	this.name = data.name;
	this.associationID = data.associationID;
	this.userDescription = data.userDescription;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.date = data.date;
	this.userType = data.userType;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userID: this.userID,
	name: this.name,
	associationID: this.associationID,
	userDescription: this.userDescription,
	latitude: this.latitude,
	longitude: this.longitude,
	date: this.date,
	userType: this.userType,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: UserLeftWorkDTO

@JsonObject('UserWalkingDTO')
export class UserWalkingDTO {
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('name', String)
	name: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('userDescription', String)
	userDescription: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('userType', Number)
	userType: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: UserWalkingDTO object

	instance(data) {
	console.log('## setting up instance of: UserWalkingDTO object')

	this.userID = data.userID;
	this.name = data.name;
	this.associationID = data.associationID;
	this.userDescription = data.userDescription;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.date = data.date;
	this.userType = data.userType;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	userID: this.userID,
	name: this.name,
	associationID: this.associationID,
	userDescription: this.userDescription,
	latitude: this.latitude,
	longitude: this.longitude,
	date: this.date,
	userType: this.userType,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: UserWalkingDTO

@JsonObject('VehicleAggregateRatingDTO')
export class VehicleAggregateRatingDTO {
	@JsonProperty('aggregate', Number)
	aggregate: number;
	@JsonProperty('count', Number)
	count: number;
	@JsonProperty('total', Number)
	total: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: VehicleAggregateRatingDTO object

	instance(data) {
	console.log('## setting up instance of: VehicleAggregateRatingDTO object')

	this.aggregate = data.aggregate;
	this.count = data.count;
	this.total = data.total;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	aggregate: this.aggregate,
	count: this.count,
	total: this.total,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: VehicleAggregateRatingDTO

@JsonObject('VehicleArrivalDTO')
export class VehicleArrivalDTO {
	@JsonProperty('arrivalID', String)
	arrivalID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('driverName', String)
	driverName: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('routeName', String)
	routeName: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('dateArrived', Number)
	dateArrived: number;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty('dispatched', Boolean)
	dispatched: boolean;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty()
	device: DeviceDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: VehicleArrivalDTO object

	instance(data) {
	console.log('## setting up instance of: VehicleArrivalDTO object')

	this.arrivalID = data.arrivalID;
	this.landmarkID = data.landmarkID;
	this.landmarkName = data.landmarkName;
	this.userID = data.userID;
	this.driverName = data.driverName;
	this.cityID = data.cityID;
	this.cityName = data.cityName;
	this.routeID = data.routeID;
	this.vehicleID = data.vehicleID;
	this.associationID = data.associationID;
	this.routeName = data.routeName;
	this.associationName = data.associationName;
	this.countryID = data.countryID;
	this.dateArrived = data.dateArrived;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.dispatched = data.dispatched;
	this.vehicle = data.vehicle;
	this.stringDate = data.stringDate;
	this.device = data.device;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	arrivalID: this.arrivalID,
	landmarkID: this.landmarkID,
	landmarkName: this.landmarkName,
	userID: this.userID,
	driverName: this.driverName,
	cityID: this.cityID,
	cityName: this.cityName,
	routeID: this.routeID,
	vehicleID: this.vehicleID,
	associationID: this.associationID,
	routeName: this.routeName,
	associationName: this.associationName,
	countryID: this.countryID,
	dateArrived: this.dateArrived,
	latitude: this.latitude,
	longitude: this.longitude,
	dispatched: this.dispatched,
	vehicle: this.vehicle,
	stringDate: this.stringDate,
	device: this.device,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: VehicleArrivalDTO

@JsonObject('VehicleDTO')
export class VehicleDTO {
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('ownerID', String)
	ownerID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('ownerName', String)
	ownerName: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('licenceExpiryDate', Number)
	licenceExpiryDate: number;
	@JsonProperty('policyIssueDate', Number)
	policyIssueDate: number;
	@JsonProperty('policyExpiryDate', Number)
	policyExpiryDate: number;
	@JsonProperty('cacheDate', Number)
	cacheDate: number;
	@JsonProperty()
	vehicleType: VehicleTypeDTO;


//**** Handle this list: photoList

	@JsonProperty('year', String)
	year: string;
	@JsonProperty('operatingLicence', String)
	operatingLicence: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('ownerPath', String)
	ownerPath: string;
	@JsonProperty('assocPath', String)
	assocPath: string;
	@JsonProperty('vehicleReg', String)
	vehicleReg: string;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('policyNumber', String)
	policyNumber: string;
	@JsonProperty('selected', Boolean)
	selected: boolean;
	@JsonProperty()
	builder: UserDTO;
	@JsonProperty('ACTIVE', String)
	ACTIVE: string;
	@JsonProperty('IN_ACTIVE', String)
	IN_ACTIVE: string;
	@JsonProperty('SUSPENDED', String)
	SUSPENDED: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: VehicleDTO object

	instance(data) {
	console.log('## setting up instance of: VehicleDTO object')

	this.vehicleID = data.vehicleID;
	this.ownerID = data.ownerID;
	this.associationID = data.associationID;
	this.countryID = data.countryID;
	this.ownerName = data.ownerName;
	this.associationName = data.associationName;
	this.date = data.date;
	this.licenceExpiryDate = data.licenceExpiryDate;
	this.policyIssueDate = data.policyIssueDate;
	this.policyExpiryDate = data.policyExpiryDate;
	this.cacheDate = data.cacheDate;
	this.vehicleType = data.vehicleType;
	this.year = data.year;
	this.operatingLicence = data.operatingLicence;
	this.stringDate = data.stringDate;
	this.ownerPath = data.ownerPath;
	this.assocPath = data.assocPath;
	this.vehicleReg = data.vehicleReg;
	this.status = data.status;
	this.policyNumber = data.policyNumber;
	this.selected = data.selected;
	this.builder = data.builder;
	this.ACTIVE = data.ACTIVE;
	this.IN_ACTIVE = data.IN_ACTIVE;
	this.SUSPENDED = data.SUSPENDED;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	vehicleID: this.vehicleID,
	ownerID: this.ownerID,
	associationID: this.associationID,
	countryID: this.countryID,
	ownerName: this.ownerName,
	associationName: this.associationName,
	date: this.date,
	licenceExpiryDate: this.licenceExpiryDate,
	policyIssueDate: this.policyIssueDate,
	policyExpiryDate: this.policyExpiryDate,
	cacheDate: this.cacheDate,
	vehicleType: this.vehicleType,
	year: this.year,
	operatingLicence: this.operatingLicence,
	stringDate: this.stringDate,
	ownerPath: this.ownerPath,
	assocPath: this.assocPath,
	vehicleReg: this.vehicleReg,
	status: this.status,
	policyNumber: this.policyNumber,
	selected: this.selected,
	builder: this.builder,
	ACTIVE: this.ACTIVE,
	IN_ACTIVE: this.IN_ACTIVE,
	SUSPENDED: this.SUSPENDED,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: VehicleDTO

@JsonObject('VehicleDepartureDTO')
export class VehicleDepartureDTO {
	@JsonProperty('departureID', String)
	departureID: string;
	@JsonProperty('landmarkID', String)
	landmarkID: string;
	@JsonProperty('landmarkName', String)
	landmarkName: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('driverName', String)
	driverName: string;
	@JsonProperty('cityID', String)
	cityID: string;
	@JsonProperty('cityName', String)
	cityName: string;
	@JsonProperty('routeID', String)
	routeID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('associationName', String)
	associationName: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('dateDeparted', Number)
	dateDeparted: number;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty()
	device: DeviceDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: VehicleDepartureDTO object

	instance(data) {
	console.log('## setting up instance of: VehicleDepartureDTO object')

	this.departureID = data.departureID;
	this.landmarkID = data.landmarkID;
	this.landmarkName = data.landmarkName;
	this.userID = data.userID;
	this.driverName = data.driverName;
	this.cityID = data.cityID;
	this.cityName = data.cityName;
	this.routeID = data.routeID;
	this.vehicleID = data.vehicleID;
	this.associationID = data.associationID;
	this.associationName = data.associationName;
	this.countryID = data.countryID;
	this.dateDeparted = data.dateDeparted;
	this.vehicle = data.vehicle;
	this.stringDate = data.stringDate;
	this.device = data.device;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	departureID: this.departureID,
	landmarkID: this.landmarkID,
	landmarkName: this.landmarkName,
	userID: this.userID,
	driverName: this.driverName,
	cityID: this.cityID,
	cityName: this.cityName,
	routeID: this.routeID,
	vehicleID: this.vehicleID,
	associationID: this.associationID,
	associationName: this.associationName,
	countryID: this.countryID,
	dateDeparted: this.dateDeparted,
	vehicle: this.vehicle,
	stringDate: this.stringDate,
	device: this.device,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: VehicleDepartureDTO

@JsonObject('VehicleDrivingDTO')
export class VehicleDrivingDTO {
	@JsonProperty('vehicleDrivingID', String)
	vehicleDrivingID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('userName', String)
	userName: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('vehicleReg', String)
	vehicleReg: string;
	@JsonProperty('ownerID', String)
	ownerID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('nearestAddress', String)
	nearestAddress: string;
	@JsonProperty('beaconName', String)
	beaconName: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty()
	vehicleType: VehicleTypeDTO;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('viaAwarenessAPI', Boolean)
	viaAwarenessAPI: boolean;
	@JsonProperty('viaNeura', Boolean)
	viaNeura: boolean;
	@JsonProperty('viaHypertrack', Boolean)
	viaHypertrack: boolean;
	@JsonProperty('beaconFound', Boolean)
	beaconFound: boolean;
	@JsonProperty('bearing', Number)
	bearing: number;
	@JsonProperty('speed', Number)
	speed: number;
	@JsonProperty('starting', Boolean)
	starting: boolean;
	@JsonProperty('stopping', Boolean)
	stopping: boolean;
	@JsonProperty('moving', Boolean)
	moving: boolean;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: VehicleDrivingDTO object

	instance(data) {
	console.log('## setting up instance of: VehicleDrivingDTO object')

	this.vehicleDrivingID = data.vehicleDrivingID;
	this.vehicleID = data.vehicleID;
	this.userID = data.userID;
	this.userName = data.userName;
	this.stringDate = data.stringDate;
	this.vehicleReg = data.vehicleReg;
	this.ownerID = data.ownerID;
	this.associationID = data.associationID;
	this.nearestAddress = data.nearestAddress;
	this.beaconName = data.beaconName;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.vehicleType = data.vehicleType;
	this.date = data.date;
	this.viaAwarenessAPI = data.viaAwarenessAPI;
	this.viaNeura = data.viaNeura;
	this.viaHypertrack = data.viaHypertrack;
	this.beaconFound = data.beaconFound;
	this.bearing = data.bearing;
	this.speed = data.speed;
	this.starting = data.starting;
	this.stopping = data.stopping;
	this.moving = data.moving;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	vehicleDrivingID: this.vehicleDrivingID,
	vehicleID: this.vehicleID,
	userID: this.userID,
	userName: this.userName,
	stringDate: this.stringDate,
	vehicleReg: this.vehicleReg,
	ownerID: this.ownerID,
	associationID: this.associationID,
	nearestAddress: this.nearestAddress,
	beaconName: this.beaconName,
	latitude: this.latitude,
	longitude: this.longitude,
	vehicleType: this.vehicleType,
	date: this.date,
	viaAwarenessAPI: this.viaAwarenessAPI,
	viaNeura: this.viaNeura,
	viaHypertrack: this.viaHypertrack,
	beaconFound: this.beaconFound,
	bearing: this.bearing,
	speed: this.speed,
	starting: this.starting,
	stopping: this.stopping,
	moving: this.moving,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: VehicleDrivingDTO

@JsonObject('VehicleFinishedDrivingDTO')
export class VehicleFinishedDrivingDTO {
	@JsonProperty('vehicleFinishedDrivingID', String)
	vehicleFinishedDrivingID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('userName', String)
	userName: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('vehicleReg', String)
	vehicleReg: string;
	@JsonProperty('ownerID', String)
	ownerID: string;
	@JsonProperty('associationID', String)
	associationID: string;
	@JsonProperty('nearestAddress', String)
	nearestAddress: string;
	@JsonProperty('beaconName', String)
	beaconName: string;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty()
	vehicleType: VehicleTypeDTO;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('viaAwarenessAPI', Boolean)
	viaAwarenessAPI: boolean;
	@JsonProperty('viaNeura', Boolean)
	viaNeura: boolean;
	@JsonProperty('viaHypertrack', Boolean)
	viaHypertrack: boolean;
	@JsonProperty('beaconFound', Boolean)
	beaconFound: boolean;
	@JsonProperty('bearing', Number)
	bearing: number;
	@JsonProperty('speed', Number)
	speed: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: VehicleFinishedDrivingDTO object

	instance(data) {
	console.log('## setting up instance of: VehicleFinishedDrivingDTO object')

	this.vehicleFinishedDrivingID = data.vehicleFinishedDrivingID;
	this.vehicleID = data.vehicleID;
	this.userID = data.userID;
	this.userName = data.userName;
	this.stringDate = data.stringDate;
	this.vehicleReg = data.vehicleReg;
	this.ownerID = data.ownerID;
	this.associationID = data.associationID;
	this.nearestAddress = data.nearestAddress;
	this.beaconName = data.beaconName;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.vehicleType = data.vehicleType;
	this.date = data.date;
	this.viaAwarenessAPI = data.viaAwarenessAPI;
	this.viaNeura = data.viaNeura;
	this.viaHypertrack = data.viaHypertrack;
	this.beaconFound = data.beaconFound;
	this.bearing = data.bearing;
	this.speed = data.speed;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	vehicleFinishedDrivingID: this.vehicleFinishedDrivingID,
	vehicleID: this.vehicleID,
	userID: this.userID,
	userName: this.userName,
	stringDate: this.stringDate,
	vehicleReg: this.vehicleReg,
	ownerID: this.ownerID,
	associationID: this.associationID,
	nearestAddress: this.nearestAddress,
	beaconName: this.beaconName,
	latitude: this.latitude,
	longitude: this.longitude,
	vehicleType: this.vehicleType,
	date: this.date,
	viaAwarenessAPI: this.viaAwarenessAPI,
	viaNeura: this.viaNeura,
	viaHypertrack: this.viaHypertrack,
	beaconFound: this.beaconFound,
	bearing: this.bearing,
	speed: this.speed,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: VehicleFinishedDrivingDTO

@JsonObject('VehicleInfoDTO')
export class VehicleInfoDTO {
	@JsonProperty('vehicleProfileID', Number)
	vehicleProfileID: number;
	@JsonProperty('type', String)
	type: string;
	@JsonProperty('year', String)
	year: string;
	@JsonProperty('make', String)
	make: string;
	@JsonProperty('capacity', Number)
	capacity: number;
	@JsonProperty('operatingLicence', String)
	operatingLicence: string;
	@JsonProperty('operatingLicenceExpDate', Number)
	operatingLicenceExpDate: number;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('status', String)
	status: string;
	@JsonProperty('vehicleID', Number)
	vehicleID: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: VehicleInfoDTO object

	instance(data) {
	console.log('## setting up instance of: VehicleInfoDTO object')

	this.vehicleProfileID = data.vehicleProfileID;
	this.type = data.type;
	this.year = data.year;
	this.make = data.make;
	this.capacity = data.capacity;
	this.operatingLicence = data.operatingLicence;
	this.operatingLicenceExpDate = data.operatingLicenceExpDate;
	this.date = data.date;
	this.status = data.status;
	this.vehicleID = data.vehicleID;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	vehicleProfileID: this.vehicleProfileID,
	type: this.type,
	year: this.year,
	make: this.make,
	capacity: this.capacity,
	operatingLicence: this.operatingLicence,
	operatingLicenceExpDate: this.operatingLicenceExpDate,
	date: this.date,
	status: this.status,
	vehicleID: this.vehicleID,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: VehicleInfoDTO

@JsonObject('VehicleLocationRequestDTO')
export class VehicleLocationRequestDTO {
	@JsonProperty('vehicleLocationRequestID', String)
	vehicleLocationRequestID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('vehicleReg', String)
	vehicleReg: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('driverID', String)
	driverID: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('userName', String)
	userName: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: VehicleLocationRequestDTO object

	instance(data) {
	console.log('## setting up instance of: VehicleLocationRequestDTO object')

	this.vehicleLocationRequestID = data.vehicleLocationRequestID;
	this.vehicleID = data.vehicleID;
	this.vehicleReg = data.vehicleReg;
	this.userID = data.userID;
	this.driverID = data.driverID;
	this.stringDate = data.stringDate;
	this.userName = data.userName;
	this.fcmToken = data.fcmToken;
	this.date = data.date;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	vehicleLocationRequestID: this.vehicleLocationRequestID,
	vehicleID: this.vehicleID,
	vehicleReg: this.vehicleReg,
	userID: this.userID,
	driverID: this.driverID,
	stringDate: this.stringDate,
	userName: this.userName,
	fcmToken: this.fcmToken,
	date: this.date,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: VehicleLocationRequestDTO

@JsonObject('VehicleLocationResponseDTO')
export class VehicleLocationResponseDTO {
	@JsonProperty('vehicleLocationResponseID', String)
	vehicleLocationResponseID: string;
	@JsonProperty('vehicleID', String)
	vehicleID: string;
	@JsonProperty('vehicleReg', String)
	vehicleReg: string;
	@JsonProperty('userID', String)
	userID: string;
	@JsonProperty('driverID', String)
	driverID: string;
	@JsonProperty('stringDate', String)
	stringDate: string;
	@JsonProperty('userName', String)
	userName: string;
	@JsonProperty('fcmToken', String)
	fcmToken: string;
	@JsonProperty('date', Number)
	date: number;
	@JsonProperty('latitude', Number)
	latitude: number;
	@JsonProperty('longitude', Number)
	longitude: number;
	@JsonProperty()
	vehicle: VehicleDTO;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: VehicleLocationResponseDTO object

	instance(data) {
	console.log('## setting up instance of: VehicleLocationResponseDTO object')

	this.vehicleLocationResponseID = data.vehicleLocationResponseID;
	this.vehicleID = data.vehicleID;
	this.vehicleReg = data.vehicleReg;
	this.userID = data.userID;
	this.driverID = data.driverID;
	this.stringDate = data.stringDate;
	this.userName = data.userName;
	this.fcmToken = data.fcmToken;
	this.date = data.date;
	this.latitude = data.latitude;
	this.longitude = data.longitude;
	this.vehicle = data.vehicle;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	vehicleLocationResponseID: this.vehicleLocationResponseID,
	vehicleID: this.vehicleID,
	vehicleReg: this.vehicleReg,
	userID: this.userID,
	driverID: this.driverID,
	stringDate: this.stringDate,
	userName: this.userName,
	fcmToken: this.fcmToken,
	date: this.date,
	latitude: this.latitude,
	longitude: this.longitude,
	vehicle: this.vehicle,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: VehicleLocationResponseDTO

@JsonObject('VehicleTypeDTO')
export class VehicleTypeDTO {
	@JsonProperty('capacity', Number)
	capacity: number;
	@JsonProperty('vehicleTypeID', String)
	vehicleTypeID: string;
	@JsonProperty('make', String)
	make: string;
	@JsonProperty('model', String)
	model: string;
	@JsonProperty('countryID', String)
	countryID: string;
	@JsonProperty('path', String)
	path: string;


	//### instance function to set up: VehicleTypeDTO object

	instance(data) {
	console.log('## setting up instance of: VehicleTypeDTO object')

	this.capacity = data.capacity;
	this.vehicleTypeID = data.vehicleTypeID;
	this.make = data.make;
	this.model = data.model;
	this.countryID = data.countryID;
	this.path = data.path;
	}


	toFirestoreMap() {
		const map = {
	capacity: this.capacity,
	vehicleTypeID: this.vehicleTypeID,
	make: this.make,
	model: this.model,
	countryID: this.countryID,
	path: this.path,

		}
	return map;
		}
}


// ------------------- end of: VehicleTypeDTO

